{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pysrf \u00b6 Similarity-Based Representation Factorization (SRF) Overview \u00b6 pysrf implements symmetric non-negative matrix factorization using the Alternating Direction Method of Multipliers (ADMM). Installation \u00b6 See the Installation Guide for detailed instructions. Quick Example \u00b6 import numpy as np from pysrf import SRF # Your similarity matrix s = np . random . rand ( 100 , 100 ) s = ( s + s . T ) / 2 # make symmetric # Fit model model = SRF ( rank = 10 , max_outer = 20 , random_state = 42 ) embedding = model . fit_transform ( s ) # Reconstruct s_reconstructed = model . reconstruct () Next Steps \u00b6 Installation Guide - Setup instructions Examples - Usage examples and workflows Quick Start Guide - Detailed tutorials API Reference - Complete API documentation Development Guide - Contributing guidelines","title":"Home"},{"location":"#pysrf","text":"Similarity-Based Representation Factorization (SRF)","title":"pysrf"},{"location":"#overview","text":"pysrf implements symmetric non-negative matrix factorization using the Alternating Direction Method of Multipliers (ADMM).","title":"Overview"},{"location":"#installation","text":"See the Installation Guide for detailed instructions.","title":"Installation"},{"location":"#quick-example","text":"import numpy as np from pysrf import SRF # Your similarity matrix s = np . random . rand ( 100 , 100 ) s = ( s + s . T ) / 2 # make symmetric # Fit model model = SRF ( rank = 10 , max_outer = 20 , random_state = 42 ) embedding = model . fit_transform ( s ) # Reconstruct s_reconstructed = model . reconstruct ()","title":"Quick Example"},{"location":"#next-steps","text":"Installation Guide - Setup instructions Examples - Usage examples and workflows Quick Start Guide - Detailed tutorials API Reference - Complete API documentation Development Guide - Contributing guidelines","title":"Next Steps"},{"location":"development/","text":"Development Guide \u00b6 Setup Development Environment \u00b6 Using the Setup Script \u00b6 The easiest way to set up the development environment: chmod +x setup.sh ./setup.sh This script will: 1. Install pyenv (if not present) 2. Install Python 3.12.4 3. Install Poetry 4. Install all dependencies 5. Compile Cython extensions 6. Run tests Manual Setup \u00b6 # Install poetry curl -sSL https://install.python-poetry.org | python3 - # Install dependencies poetry install # Compile Cython extensions poetry run pysrf-compile # Run tests poetry run pytest Makefile Commands \u00b6 The project includes a Makefile for common development tasks: make help # Show all available commands make dev # Install with dev dependencies + compile Cython make compile # Compile Cython extensions make test # Run test suite make test-cov # Run tests with coverage report make lint # Run linters (ruff + black) make format # Format code with black make clean # Remove build artifacts make build # Build distribution package make docs # Build documentation make docs-serve # Serve documentation locally Running Tests \u00b6 # Run all tests make test # Run with coverage make test-cov # Run specific test file poetry run pytest tests/test_model.py -v # Run specific test poetry run pytest tests/test_model.py::test_srf_fit_complete_data -v Code Quality \u00b6 Linting \u00b6 # Check code quality make lint # Auto-format code make format Type Checking \u00b6 The codebase uses Python 3.10+ type hints: from __future__ import annotations def my_function ( x : np . ndarray , rank : int = 10 ) -> tuple [ np . ndarray , float ]: ... Cython Extensions \u00b6 The performance-critical inner loop is implemented in Cython ( _bsum.pyx ): # Compile Cython extensions make compile # Or directly poetry run pysrf-compile Testing Cython vs Python \u00b6 from pysrf.model import _get_update_w_function update_w = _get_update_w_function () print ( f \"Using: { update_w . __module__ } \" ) # Cython: _bsum # Python fallback: pysrf.model Documentation \u00b6 Building Docs \u00b6 # Build documentation make docs # Serve locally at http://127.0.0.1:8000 make docs-serve Writing Docstrings \u00b6 Use NumPy-style docstrings: def my_function ( x : np . ndarray , param : int = 10 ) -> float : \"\"\" Brief description. Longer description explaining the function's purpose and behavior. Parameters ---------- x : ndarray Description of x param : int, default=10 Description of param Returns ------- result : float Description of return value Examples -------- >>> result = my_function(np.array([1, 2, 3])) >>> print(result) 0.123 \"\"\" ... Contributing \u00b6 Workflow \u00b6 Fork the repository Create a feature branch: git checkout -b feature-name Make your changes Run tests: make test Format code: make format Commit: git commit -m \"Add feature\" Push: git push origin feature-name Open a Pull Request Guidelines \u00b6 Write tests for new features Maintain type hints Update documentation Keep changes focused Follow existing code style Publishing \u00b6 PyPI Release \u00b6 # Update version in pyproject.toml poetry version patch # or minor, major # Build package make build # Publish to PyPI poetry publish Development Release \u00b6 # Build with dev version poetry version prerelease # Publish to TestPyPI poetry publish -r testpypi Project Structure \u00b6 pysrf/ \u251c\u2500\u2500 pysrf/ # Main package \u2502 \u251c\u2500\u2500 __init__.py # Public API \u2502 \u251c\u2500\u2500 model.py # SRF class \u2502 \u251c\u2500\u2500 cross_validation.py \u2502 \u251c\u2500\u2500 bounds.py # Sampling bound estimation \u2502 \u251c\u2500\u2500 utils.py # Helper functions \u2502 \u2514\u2500\u2500 _bsum.pyx # Cython extension \u251c\u2500\u2500 tests/ # Test suite \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 build.py # Cython build script \u251c\u2500\u2500 Makefile # Development commands \u251c\u2500\u2500 pyproject.toml # Poetry config \u2514\u2500\u2500 README.md # Project overview","title":"Development"},{"location":"development/#development-guide","text":"","title":"Development Guide"},{"location":"development/#setup-development-environment","text":"","title":"Setup Development Environment"},{"location":"development/#using-the-setup-script","text":"The easiest way to set up the development environment: chmod +x setup.sh ./setup.sh This script will: 1. Install pyenv (if not present) 2. Install Python 3.12.4 3. Install Poetry 4. Install all dependencies 5. Compile Cython extensions 6. Run tests","title":"Using the Setup Script"},{"location":"development/#manual-setup","text":"# Install poetry curl -sSL https://install.python-poetry.org | python3 - # Install dependencies poetry install # Compile Cython extensions poetry run pysrf-compile # Run tests poetry run pytest","title":"Manual Setup"},{"location":"development/#makefile-commands","text":"The project includes a Makefile for common development tasks: make help # Show all available commands make dev # Install with dev dependencies + compile Cython make compile # Compile Cython extensions make test # Run test suite make test-cov # Run tests with coverage report make lint # Run linters (ruff + black) make format # Format code with black make clean # Remove build artifacts make build # Build distribution package make docs # Build documentation make docs-serve # Serve documentation locally","title":"Makefile Commands"},{"location":"development/#running-tests","text":"# Run all tests make test # Run with coverage make test-cov # Run specific test file poetry run pytest tests/test_model.py -v # Run specific test poetry run pytest tests/test_model.py::test_srf_fit_complete_data -v","title":"Running Tests"},{"location":"development/#code-quality","text":"","title":"Code Quality"},{"location":"development/#linting","text":"# Check code quality make lint # Auto-format code make format","title":"Linting"},{"location":"development/#type-checking","text":"The codebase uses Python 3.10+ type hints: from __future__ import annotations def my_function ( x : np . ndarray , rank : int = 10 ) -> tuple [ np . ndarray , float ]: ...","title":"Type Checking"},{"location":"development/#cython-extensions","text":"The performance-critical inner loop is implemented in Cython ( _bsum.pyx ): # Compile Cython extensions make compile # Or directly poetry run pysrf-compile","title":"Cython Extensions"},{"location":"development/#testing-cython-vs-python","text":"from pysrf.model import _get_update_w_function update_w = _get_update_w_function () print ( f \"Using: { update_w . __module__ } \" ) # Cython: _bsum # Python fallback: pysrf.model","title":"Testing Cython vs Python"},{"location":"development/#documentation","text":"","title":"Documentation"},{"location":"development/#building-docs","text":"# Build documentation make docs # Serve locally at http://127.0.0.1:8000 make docs-serve","title":"Building Docs"},{"location":"development/#writing-docstrings","text":"Use NumPy-style docstrings: def my_function ( x : np . ndarray , param : int = 10 ) -> float : \"\"\" Brief description. Longer description explaining the function's purpose and behavior. Parameters ---------- x : ndarray Description of x param : int, default=10 Description of param Returns ------- result : float Description of return value Examples -------- >>> result = my_function(np.array([1, 2, 3])) >>> print(result) 0.123 \"\"\" ...","title":"Writing Docstrings"},{"location":"development/#contributing","text":"","title":"Contributing"},{"location":"development/#workflow","text":"Fork the repository Create a feature branch: git checkout -b feature-name Make your changes Run tests: make test Format code: make format Commit: git commit -m \"Add feature\" Push: git push origin feature-name Open a Pull Request","title":"Workflow"},{"location":"development/#guidelines","text":"Write tests for new features Maintain type hints Update documentation Keep changes focused Follow existing code style","title":"Guidelines"},{"location":"development/#publishing","text":"","title":"Publishing"},{"location":"development/#pypi-release","text":"# Update version in pyproject.toml poetry version patch # or minor, major # Build package make build # Publish to PyPI poetry publish","title":"PyPI Release"},{"location":"development/#development-release","text":"# Build with dev version poetry version prerelease # Publish to TestPyPI poetry publish -r testpypi","title":"Development Release"},{"location":"development/#project-structure","text":"pysrf/ \u251c\u2500\u2500 pysrf/ # Main package \u2502 \u251c\u2500\u2500 __init__.py # Public API \u2502 \u251c\u2500\u2500 model.py # SRF class \u2502 \u251c\u2500\u2500 cross_validation.py \u2502 \u251c\u2500\u2500 bounds.py # Sampling bound estimation \u2502 \u251c\u2500\u2500 utils.py # Helper functions \u2502 \u2514\u2500\u2500 _bsum.pyx # Cython extension \u251c\u2500\u2500 tests/ # Test suite \u251c\u2500\u2500 docs/ # Documentation \u251c\u2500\u2500 build.py # Cython build script \u251c\u2500\u2500 Makefile # Development commands \u251c\u2500\u2500 pyproject.toml # Poetry config \u2514\u2500\u2500 README.md # Project overview","title":"Project Structure"},{"location":"examples/","text":"Examples \u00b6 Basic Usage \u00b6 import numpy as np from pysrf import SRF # Generate data n , rank = 100 , 10 w_true = np . random . rand ( n , rank ) s = w_true @ w_true . T # Fit model model = SRF ( rank = 10 , random_state = 42 ) w = model . fit_transform ( s ) s_hat = model . reconstruct () Handling Missing Data \u00b6 import numpy as np from pysrf import SRF # Generate data with missing entries n , rank = 100 , 10 w_true = np . random . rand ( n , rank ) s = w_true @ w_true . T # Mark missing entries mask = np . random . rand ( n , n ) < 0.3 s [ mask ] = np . nan # Fit model with missing data model = SRF ( rank = 10 , missing_values = np . nan , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct () Cross-Validation for Rank Selection \u00b6 from pysrf import cross_val_score , SRF # Auto-estimate sampling fraction cv = cross_val_score ( s , estimate_sampling_fraction = True , param_grid = { \"rank\" : [ 5 , 10 , 15 , 20 ]}, n_repeats = 5 , n_jobs =- 1 , random_state = 42 ) print ( f \"Best rank: { cv . best_params_ [ 'rank' ] } \" ) print ( f \"Best score: { cv . best_score_ : .4f } \" ) Ensemble and Consensus Clustering \u00b6 from sklearn import pipeline from pysrf.consensus import EnsembleEmbedding , ClusterEmbedding from pysrf import SRF , cross_val_score # 1. Rank selection cv = cross_val_score ( s , estimate_sampling_fraction = True , param_grid = { \"rank\" : [ 5 , 10 , 15 , 20 ]}, n_repeats = 5 , n_jobs =- 1 , ) # 2. Stable ensemble + consensus clustering pipe = pipeline . Pipeline ( [ ( \"ensemble\" , EnsembleEmbedding ( SRF ( cv . best_params_ ), n_runs = 50 )), ( \"cluster\" , ClusterEmbedding ( min_clusters = 2 , max_clusters = 6 , step = 1 )), ] ) consensus_embedding = pipe . fit_transform ( s ) Value Bounds \u00b6 from pysrf import SRF # Constrain reconstructed values to [0, 1] (e.g., for cosine similarity) model = SRF ( rank = 10 , bounds = ( 0 , 1 ), random_state = 42 ) w = model . fit_transform ( s ) s_reconstructed = model . reconstruct () # Verify bounds assert s_reconstructed . min () >= 0 assert s_reconstructed . max () <= 1 Sampling Bound Estimation \u00b6 from pysrf import estimate_sampling_bounds_fast # Estimate sampling rate bounds for reliable matrix completion pmin , pmax , s_denoised = estimate_sampling_bounds_fast ( s , n_jobs =- 1 , random_state = 42 ) print ( f \"Minimum sampling rate: { pmin : .4f } \" ) print ( f \"Maximum sampling rate: { pmax : .4f } \" ) # Use mid-point for cross-validation sampling_rate = 0.5 * ( pmin + pmax ) Complete Workflow \u00b6 import numpy as np from pysrf import SRF , cross_val_score , estimate_sampling_bounds_fast # 1. Generate data np . random . seed ( 42 ) n , true_rank = 100 , 8 w_true = np . random . rand ( n , true_rank ) s = w_true @ w_true . T # 2. Add noise and missing data s += 0.1 * np . random . randn ( n , n ) s = ( s + s . T ) / 2 mask = np . random . rand ( n , n ) < 0.2 s [ mask ] = np . nan # 3. Estimate sampling bounds pmin , pmax , _ = estimate_sampling_bounds_fast ( s , n_jobs =- 1 ) print ( f \"Sampling bounds: [ { pmin : .3f } , { pmax : .3f } ]\" ) # 4. Cross-validate to find best rank result = cross_val_score ( s , param_grid = { 'rank' : range ( 5 , 21 )}, estimate_sampling_fraction = True , n_repeats = 3 , n_jobs =- 1 , random_state = 42 ) best_rank = result . best_params_ [ 'rank' ] print ( f \"Best rank: { best_rank } (true rank: { true_rank } )\" ) # 5. Fit final model model = SRF ( rank = best_rank , max_outer = 20 , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct () # 6. Evaluate score = model . score ( s ) print ( f \"Reconstruction error: { score : .4f } \" )","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#basic-usage","text":"import numpy as np from pysrf import SRF # Generate data n , rank = 100 , 10 w_true = np . random . rand ( n , rank ) s = w_true @ w_true . T # Fit model model = SRF ( rank = 10 , random_state = 42 ) w = model . fit_transform ( s ) s_hat = model . reconstruct ()","title":"Basic Usage"},{"location":"examples/#handling-missing-data","text":"import numpy as np from pysrf import SRF # Generate data with missing entries n , rank = 100 , 10 w_true = np . random . rand ( n , rank ) s = w_true @ w_true . T # Mark missing entries mask = np . random . rand ( n , n ) < 0.3 s [ mask ] = np . nan # Fit model with missing data model = SRF ( rank = 10 , missing_values = np . nan , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct ()","title":"Handling Missing Data"},{"location":"examples/#cross-validation-for-rank-selection","text":"from pysrf import cross_val_score , SRF # Auto-estimate sampling fraction cv = cross_val_score ( s , estimate_sampling_fraction = True , param_grid = { \"rank\" : [ 5 , 10 , 15 , 20 ]}, n_repeats = 5 , n_jobs =- 1 , random_state = 42 ) print ( f \"Best rank: { cv . best_params_ [ 'rank' ] } \" ) print ( f \"Best score: { cv . best_score_ : .4f } \" )","title":"Cross-Validation for Rank Selection"},{"location":"examples/#ensemble-and-consensus-clustering","text":"from sklearn import pipeline from pysrf.consensus import EnsembleEmbedding , ClusterEmbedding from pysrf import SRF , cross_val_score # 1. Rank selection cv = cross_val_score ( s , estimate_sampling_fraction = True , param_grid = { \"rank\" : [ 5 , 10 , 15 , 20 ]}, n_repeats = 5 , n_jobs =- 1 , ) # 2. Stable ensemble + consensus clustering pipe = pipeline . Pipeline ( [ ( \"ensemble\" , EnsembleEmbedding ( SRF ( cv . best_params_ ), n_runs = 50 )), ( \"cluster\" , ClusterEmbedding ( min_clusters = 2 , max_clusters = 6 , step = 1 )), ] ) consensus_embedding = pipe . fit_transform ( s )","title":"Ensemble and Consensus Clustering"},{"location":"examples/#value-bounds","text":"from pysrf import SRF # Constrain reconstructed values to [0, 1] (e.g., for cosine similarity) model = SRF ( rank = 10 , bounds = ( 0 , 1 ), random_state = 42 ) w = model . fit_transform ( s ) s_reconstructed = model . reconstruct () # Verify bounds assert s_reconstructed . min () >= 0 assert s_reconstructed . max () <= 1","title":"Value Bounds"},{"location":"examples/#sampling-bound-estimation","text":"from pysrf import estimate_sampling_bounds_fast # Estimate sampling rate bounds for reliable matrix completion pmin , pmax , s_denoised = estimate_sampling_bounds_fast ( s , n_jobs =- 1 , random_state = 42 ) print ( f \"Minimum sampling rate: { pmin : .4f } \" ) print ( f \"Maximum sampling rate: { pmax : .4f } \" ) # Use mid-point for cross-validation sampling_rate = 0.5 * ( pmin + pmax )","title":"Sampling Bound Estimation"},{"location":"examples/#complete-workflow","text":"import numpy as np from pysrf import SRF , cross_val_score , estimate_sampling_bounds_fast # 1. Generate data np . random . seed ( 42 ) n , true_rank = 100 , 8 w_true = np . random . rand ( n , true_rank ) s = w_true @ w_true . T # 2. Add noise and missing data s += 0.1 * np . random . randn ( n , n ) s = ( s + s . T ) / 2 mask = np . random . rand ( n , n ) < 0.2 s [ mask ] = np . nan # 3. Estimate sampling bounds pmin , pmax , _ = estimate_sampling_bounds_fast ( s , n_jobs =- 1 ) print ( f \"Sampling bounds: [ { pmin : .3f } , { pmax : .3f } ]\" ) # 4. Cross-validate to find best rank result = cross_val_score ( s , param_grid = { 'rank' : range ( 5 , 21 )}, estimate_sampling_fraction = True , n_repeats = 3 , n_jobs =- 1 , random_state = 42 ) best_rank = result . best_params_ [ 'rank' ] print ( f \"Best rank: { best_rank } (true rank: { true_rank } )\" ) # 5. Fit final model model = SRF ( rank = best_rank , max_outer = 20 , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct () # 6. Evaluate score = model . score ( s ) print ( f \"Reconstruction error: { score : .4f } \" )","title":"Complete Workflow"},{"location":"installation/","text":"Installation \u00b6 Cython Compilation For optimal performance (10-50x speedup), ensure Cython extensions are compiled during installation. You may need development tools installed. Automated Setup (Recommended) \u00b6 The easiest way to set up the complete development environment: git clone https://github.com/fmahner/pysrf.git cd pysrf ./setup.sh This script will: 1. Check for and install pyenv (if missing) 2. Install poetry (if missing) 3. Install Python 3.12.4 via pyenv 4. Set the local Python version 5. Install all dependencies via poetry 6. Compile Cython extensions for 10-50x speedup 7. Run the test suite Activate the environment with poetry shell . Manual Installation \u00b6 If you prefer manual setup or need more control: Step 1: Install Prerequisites \u00b6 # Install pyenv (if not already installed) curl https://pyenv.run | bash # Install poetry (if not already installed) curl -sSL https://install.python-poetry.org | python3 - Step 2: Set Up Python Environment \u00b6 # Install Python 3.12.4 (or your preferred version >=3.10) pyenv install 3 .12.4 pyenv local 3 .12.4 Step 3: Install Dependencies \u00b6 # Install dependencies with poetry poetry install Step 4: Compile Cython Extensions \u00b6 Cython compilation is critical for performance (10-50x speedup). Without it, a pure Python fallback is used. # Compile via poetry script poetry run pysrf-compile # Or use Makefile (includes additional options) make compile The Makefile also provides other useful commands: - make dev - Install with dev dependencies and compile - make test - Run test suite - make format - Format code - make clean - Remove build artifacts - make docs - Build documentation Run make help for all available commands. Alternative Installation Methods \u00b6 From PyPI (Future) \u00b6 Once published to PyPI: # Stable release pip install pysrf # Development version pip install --pre pysrf As Git Subtree (For Development Integration) \u00b6 # Add as subtree in your project git subtree add --prefix = pysrf https://github.com/fmahner/pysrf.git master --squash # Update subtree git subtree pull --prefix = pysrf https://github.com/fmahner/pysrf.git master --squash # Install from subtree cd pysrf && poetry install && make compile Verify Installation \u00b6 import pysrf print ( pysrf . __version__ ) # Check Cython compilation from pysrf.model import _get_update_w_function update_w = _get_update_w_function () print ( f \"Using: { update_w . __module__ } \" ) # Should show _bsum if compiled","title":"Installation"},{"location":"installation/#installation","text":"Cython Compilation For optimal performance (10-50x speedup), ensure Cython extensions are compiled during installation. You may need development tools installed.","title":"Installation"},{"location":"installation/#automated-setup-recommended","text":"The easiest way to set up the complete development environment: git clone https://github.com/fmahner/pysrf.git cd pysrf ./setup.sh This script will: 1. Check for and install pyenv (if missing) 2. Install poetry (if missing) 3. Install Python 3.12.4 via pyenv 4. Set the local Python version 5. Install all dependencies via poetry 6. Compile Cython extensions for 10-50x speedup 7. Run the test suite Activate the environment with poetry shell .","title":"Automated Setup (Recommended)"},{"location":"installation/#manual-installation","text":"If you prefer manual setup or need more control:","title":"Manual Installation"},{"location":"installation/#step-1-install-prerequisites","text":"# Install pyenv (if not already installed) curl https://pyenv.run | bash # Install poetry (if not already installed) curl -sSL https://install.python-poetry.org | python3 -","title":"Step 1: Install Prerequisites"},{"location":"installation/#step-2-set-up-python-environment","text":"# Install Python 3.12.4 (or your preferred version >=3.10) pyenv install 3 .12.4 pyenv local 3 .12.4","title":"Step 2: Set Up Python Environment"},{"location":"installation/#step-3-install-dependencies","text":"# Install dependencies with poetry poetry install","title":"Step 3: Install Dependencies"},{"location":"installation/#step-4-compile-cython-extensions","text":"Cython compilation is critical for performance (10-50x speedup). Without it, a pure Python fallback is used. # Compile via poetry script poetry run pysrf-compile # Or use Makefile (includes additional options) make compile The Makefile also provides other useful commands: - make dev - Install with dev dependencies and compile - make test - Run test suite - make format - Format code - make clean - Remove build artifacts - make docs - Build documentation Run make help for all available commands.","title":"Step 4: Compile Cython Extensions"},{"location":"installation/#alternative-installation-methods","text":"","title":"Alternative Installation Methods"},{"location":"installation/#from-pypi-future","text":"Once published to PyPI: # Stable release pip install pysrf # Development version pip install --pre pysrf","title":"From PyPI (Future)"},{"location":"installation/#as-git-subtree-for-development-integration","text":"# Add as subtree in your project git subtree add --prefix = pysrf https://github.com/fmahner/pysrf.git master --squash # Update subtree git subtree pull --prefix = pysrf https://github.com/fmahner/pysrf.git master --squash # Install from subtree cd pysrf && poetry install && make compile","title":"As Git Subtree (For Development Integration)"},{"location":"installation/#verify-installation","text":"import pysrf print ( pysrf . __version__ ) # Check Cython compilation from pysrf.model import _get_update_w_function update_w = _get_update_w_function () print ( f \"Using: { update_w . __module__ } \" ) # Should show _bsum if compiled","title":"Verify Installation"},{"location":"quickstart/","text":"Quick Start \u00b6 Basic Usage \u00b6 Matrix Factorization \u00b6 import numpy as np from pysrf import SRF # Generate or load your similarity matrix s = np . random . rand ( 100 , 100 ) s = ( s + s . T ) / 2 # ensure symmetry # Fit the model model = SRF ( rank = 10 , max_outer = 20 , random_state = 42 ) w = model . fit_transform ( s ) # Reconstruct the matrix s_reconstructed = model . reconstruct () # or equivalently: s_reconstructed = w @ w.T # Evaluate fit score = model . score ( s ) print ( f \"Reconstruction error: { score : .4f } \" ) Handling Missing Data \u00b6 import numpy as np from pysrf import SRF # Matrix with missing values (NaN) s = np . random . rand ( 100 , 100 ) s = ( s + s . T ) / 2 s [ np . random . rand ( 100 , 100 ) < 0.3 ] = np . nan # 30% missing # Model handles missing data automatically model = SRF ( rank = 10 , missing_values = np . nan , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct () Cross-Validation to estimate the rank \u00b6 Manual Sampling Fraction \u00b6 from pysrf import cross_val_score # Define parameter grid param_grid = { 'rank' : [ 5 , 10 , 15 , 20 ], 'rho' : [ 2.0 , 3.0 , 4.0 ] } # Run cross-validation result = cross_val_score ( s , param_grid = param_grid , sampling_fraction = 0.8 , # 80/20 train/test split n_repeats = 5 , n_jobs =- 1 , random_state = 42 ) print ( f \"Best parameters: { result . best_params_ } \" ) print ( f \"Best score: { result . best_score_ : .4f } \" ) Automatic Sampling Fraction Estimation \u00b6 The optimal sampling fraction can be automatically estimated: from pysrf import cross_val_score # Automatically estimate optimal sampling fraction result = cross_val_score ( s , param_grid = { 'rank' : [ 5 , 10 , 15 , 20 ]}, estimate_sampling_fraction = True , # \u2728 New feature! n_repeats = 5 , n_jobs =- 1 , random_state = 42 , verbose = 1 # Shows estimated bounds ) print ( f \"Best rank: { result . best_params_ [ 'rank' ] } \" ) Sampling Bound Estimation \u00b6 Estimate the sampling rate bounds required for reliable matrix completion: from pysrf import estimate_sampling_bounds_fast # Estimate bounds pmin , pmax , s_denoised = estimate_sampling_bounds_fast ( s , n_jobs =- 1 , random_state = 42 ) print ( f \"Minimum sampling rate: { pmin : .4f } \" ) print ( f \"Maximum sampling rate: { pmax : .4f } \" ) # Use mid-point for cross-validation sampling_rate = 0.5 * ( pmin + pmax ) Value Bounds \u00b6 Constrain reconstructed values to known ranges: from pysrf import SRF # For cosine similarity (range: [0, 1]) model = SRF ( rank = 10 , bounds = ( 0 , 1 ), random_state = 42 ) w = model . fit_transform ( s ) s_reconstructed = model . reconstruct () # Verify bounds assert s_reconstructed . min () >= 0 assert s_reconstructed . max () <= 1 Complete Example \u00b6 import numpy as np from pysrf import SRF , cross_val_score , estimate_sampling_bounds_fast # 1. Generate data np . random . seed ( 42 ) n , true_rank = 100 , 8 w_true = np . random . rand ( n , true_rank ) s = w_true @ w_true . T # 2. Add noise and missing data s += 0.1 * np . random . randn ( n , n ) s = ( s + s . T ) / 2 mask = np . random . rand ( n , n ) < 0.2 s [ mask ] = np . nan # 3. Estimate sampling bounds pmin , pmax , _ = estimate_sampling_bounds_fast ( s , n_jobs =- 1 ) print ( f \"Sampling bounds: [ { pmin : .3f } , { pmax : .3f } ]\" ) # 4. Cross-validate to find best rank result = cross_val_score ( s , param_grid = { 'rank' : range ( 5 , 21 )}, estimate_sampling_fraction = True , n_repeats = 3 , n_jobs =- 1 , random_state = 42 ) best_rank = result . best_params_ [ 'rank' ] print ( f \"Best rank: { best_rank } (true rank: { true_rank } )\" ) # 5. Fit final model model = SRF ( rank = best_rank , max_outer = 20 , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct () # 6. Evaluate score = model . score ( s ) print ( f \"Reconstruction error: { score : .4f } \" ) Next Steps \u00b6 Check the API Reference for detailed parameter descriptions See Development for contributing guidelines","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#basic-usage","text":"","title":"Basic Usage"},{"location":"quickstart/#matrix-factorization","text":"import numpy as np from pysrf import SRF # Generate or load your similarity matrix s = np . random . rand ( 100 , 100 ) s = ( s + s . T ) / 2 # ensure symmetry # Fit the model model = SRF ( rank = 10 , max_outer = 20 , random_state = 42 ) w = model . fit_transform ( s ) # Reconstruct the matrix s_reconstructed = model . reconstruct () # or equivalently: s_reconstructed = w @ w.T # Evaluate fit score = model . score ( s ) print ( f \"Reconstruction error: { score : .4f } \" )","title":"Matrix Factorization"},{"location":"quickstart/#handling-missing-data","text":"import numpy as np from pysrf import SRF # Matrix with missing values (NaN) s = np . random . rand ( 100 , 100 ) s = ( s + s . T ) / 2 s [ np . random . rand ( 100 , 100 ) < 0.3 ] = np . nan # 30% missing # Model handles missing data automatically model = SRF ( rank = 10 , missing_values = np . nan , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct ()","title":"Handling Missing Data"},{"location":"quickstart/#cross-validation-to-estimate-the-rank","text":"","title":"Cross-Validation to estimate the rank"},{"location":"quickstart/#manual-sampling-fraction","text":"from pysrf import cross_val_score # Define parameter grid param_grid = { 'rank' : [ 5 , 10 , 15 , 20 ], 'rho' : [ 2.0 , 3.0 , 4.0 ] } # Run cross-validation result = cross_val_score ( s , param_grid = param_grid , sampling_fraction = 0.8 , # 80/20 train/test split n_repeats = 5 , n_jobs =- 1 , random_state = 42 ) print ( f \"Best parameters: { result . best_params_ } \" ) print ( f \"Best score: { result . best_score_ : .4f } \" )","title":"Manual Sampling Fraction"},{"location":"quickstart/#automatic-sampling-fraction-estimation","text":"The optimal sampling fraction can be automatically estimated: from pysrf import cross_val_score # Automatically estimate optimal sampling fraction result = cross_val_score ( s , param_grid = { 'rank' : [ 5 , 10 , 15 , 20 ]}, estimate_sampling_fraction = True , # \u2728 New feature! n_repeats = 5 , n_jobs =- 1 , random_state = 42 , verbose = 1 # Shows estimated bounds ) print ( f \"Best rank: { result . best_params_ [ 'rank' ] } \" )","title":"Automatic Sampling Fraction Estimation"},{"location":"quickstart/#sampling-bound-estimation","text":"Estimate the sampling rate bounds required for reliable matrix completion: from pysrf import estimate_sampling_bounds_fast # Estimate bounds pmin , pmax , s_denoised = estimate_sampling_bounds_fast ( s , n_jobs =- 1 , random_state = 42 ) print ( f \"Minimum sampling rate: { pmin : .4f } \" ) print ( f \"Maximum sampling rate: { pmax : .4f } \" ) # Use mid-point for cross-validation sampling_rate = 0.5 * ( pmin + pmax )","title":"Sampling Bound Estimation"},{"location":"quickstart/#value-bounds","text":"Constrain reconstructed values to known ranges: from pysrf import SRF # For cosine similarity (range: [0, 1]) model = SRF ( rank = 10 , bounds = ( 0 , 1 ), random_state = 42 ) w = model . fit_transform ( s ) s_reconstructed = model . reconstruct () # Verify bounds assert s_reconstructed . min () >= 0 assert s_reconstructed . max () <= 1","title":"Value Bounds"},{"location":"quickstart/#complete-example","text":"import numpy as np from pysrf import SRF , cross_val_score , estimate_sampling_bounds_fast # 1. Generate data np . random . seed ( 42 ) n , true_rank = 100 , 8 w_true = np . random . rand ( n , true_rank ) s = w_true @ w_true . T # 2. Add noise and missing data s += 0.1 * np . random . randn ( n , n ) s = ( s + s . T ) / 2 mask = np . random . rand ( n , n ) < 0.2 s [ mask ] = np . nan # 3. Estimate sampling bounds pmin , pmax , _ = estimate_sampling_bounds_fast ( s , n_jobs =- 1 ) print ( f \"Sampling bounds: [ { pmin : .3f } , { pmax : .3f } ]\" ) # 4. Cross-validate to find best rank result = cross_val_score ( s , param_grid = { 'rank' : range ( 5 , 21 )}, estimate_sampling_fraction = True , n_repeats = 3 , n_jobs =- 1 , random_state = 42 ) best_rank = result . best_params_ [ 'rank' ] print ( f \"Best rank: { best_rank } (true rank: { true_rank } )\" ) # 5. Fit final model model = SRF ( rank = best_rank , max_outer = 20 , random_state = 42 ) w = model . fit_transform ( s ) s_completed = model . reconstruct () # 6. Evaluate score = model . score ( s ) print ( f \"Reconstruction error: { score : .4f } \" )","title":"Complete Example"},{"location":"quickstart/#next-steps","text":"Check the API Reference for detailed parameter descriptions See Development for contributing guidelines","title":"Next Steps"},{"location":"api/bounds/","text":"Sampling Bounds API \u00b6 Main Functions \u00b6 estimate_sampling_bounds_fast \u00b6 estimate_sampling_bounds_fast ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 0.001 , jump_frac : float = 0.1 , tol : float = 0.0001 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , n_jobs : int = - 1 , ) -> tuple [ float , float , np . ndarray ] Source code in pysrf/bounds.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 def estimate_sampling_bounds_fast ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 1e-3 , jump_frac : float = 0.1 , tol : float = 1e-4 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , n_jobs : int = - 1 , ) -> tuple [ float , float , np . ndarray ]: pmin , _ , _ , _ , _ = pmin_bound ( S , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose ) eff_dim = np . ceil (( np . linalg . norm ( S , \"fro\" ) / np . linalg . norm ( S , 2 )) ** 2 ) . astype ( int ) pmax = p_upper_only_k ( S , k = eff_dim , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) S_noise = S if pmin > pmax - gap : epsilon = np . linalg . norm ( S , 2 ) / np . sqrt ( S . shape [ 0 ]) t_range = np . linspace ( 0.0 , epsilon , 10 ) A = np . random . rand ( S . shape [ 0 ], S . shape [ 1 ]) AtA = A + A . T def _eval_t ( t ): S_t = S + t * AtA pmin_t , _ , _ , _ , _ = pmin_bound ( S_t , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose , ) eff_dim_t = np . ceil ( ( np . linalg . norm ( S_t , \"fro\" ) / np . linalg . norm ( S_t , 2 )) ** 2 ) . astype ( int ) pmax_t = p_upper_only_k ( S_t , k = eff_dim_t , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) return float ( pmin_t ), float ( pmax_t ) results = Parallel ( n_jobs = n_jobs )( delayed ( _eval_t )( float ( t )) for t in t_range ) idx = None for i , ( pm , px ) in enumerate ( results ): if pm < px - gap : idx = i break if idx is not None : t_threshold = float ( t_range [ idx ]) pmin , pmax = results [ idx ] else : t_threshold = 0.0 pmin , pmax = results [ - 1 ] S_noise = S + t_threshold * AtA return pmin , pmax , S_noise estimate_sampling_bounds \u00b6 estimate_sampling_bounds ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 0.001 , jump_frac : float = 0.1 , tol : float = 0.0001 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , ) -> tuple [ float , float , np . ndarray ] Source code in pysrf/bounds.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 def estimate_sampling_bounds ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 1e-3 , jump_frac : float = 0.1 , tol : float = 1e-4 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , ) -> tuple [ float , float , np . ndarray ]: pmin , _ , _ , _ , _ = pmin_bound ( S , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose ) eff_dim = np . ceil (( np . linalg . norm ( S , \"fro\" ) / np . linalg . norm ( S , 2 )) ** 2 ) . astype ( int ) pmax = p_upper_only_k ( S , k = eff_dim , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) S_noise = S if pmin > pmax - gap : if verbose : print ( \"Noise regime triggered\" ) print ( f \"pmin = { pmin } , pmax = { pmax } \" ) epsilon = np . linalg . norm ( S , 2 ) / np . sqrt ( S . shape [ 0 ]) t_range = np . linspace ( 0.0 , epsilon , 10 ) eff_dim_list = [] pmin_list = [] pmax_list = [] A = np . random . rand ( S . shape [ 0 ], S . shape [ 1 ]) t_threshold = 0 t_iter = iter ( t_range ) t = next ( t_iter ) while True : S_noise = S + t * ( A + A . T ) pmin , _ , _ , _ , _ = pmin_bound ( S_noise , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose , ) eff_dim = np . ceil ( ( np . linalg . norm ( S_noise , \"fro\" ) / np . linalg . norm ( S_noise , 2 )) ** 2 ) . astype ( int ) pmax = p_upper_only_k ( S_noise , k = eff_dim , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) if verbose : print ( t , pmin , eff_dim , pmax ) eff_dim_list . append ( eff_dim ) pmin_list . append ( pmin ) pmax_list . append ( pmax ) if pmin < pmax - gap : t_threshold = t break try : t = next ( t_iter ) except StopIteration : break S_noise = S + t_threshold * ( A + A . T ) return pmin , pmax , S_noise Lower Bound Estimation \u00b6 pmin_bound \u00b6 pmin_bound ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , n_realizations : int = 500 , random_state : int | None = None , verbose : bool = False , monte_carlo : bool = False , ) -> tuple [ float , float , float , float , np . ndarray ] Source code in pysrf/bounds.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def pmin_bound ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , n_realizations : int = 500 , random_state : int | None = None , verbose : bool = False , monte_carlo : bool = False , ) -> tuple [ float , float , float , float , np . ndarray ]: np . random . seed ( random_state ) n = S . shape [ 0 ] _is_symmetric = np . allclose ( S , S . T ) L_max = np . max (( S ** 2 ) . sum ( axis = 1 ) - np . diag ( S ) ** 2 ) _row_sq = ( S ** 2 ) . sum ( axis = 1 ) - np . diag ( S ) ** 2 empirical_L_max = np . quantile ( _row_sq , rho ) S_norm = np . linalg . norm ( S , 2 ) L_infty = 2 * np . max ( np . abs ( S )) empirical_L_infty = 2 * np . quantile ( np . abs ( S ), rho ) effective_dimension = ( np . linalg . norm ( S , \"fro\" ) / S_norm ) ** 2 if verbose : print ( \"effective dimension : \" , effective_dimension ) MC_expected_MS_norms = np . zeros ( n_realizations ) if monte_carlo : for i in range ( n_realizations ): _p = np . random . rand () _mask = np . random . binomial ( 1 , _p , size = S . shape ) if _is_symmetric : _mask = np . triu ( _mask , 1 ) _mask += _mask . T MC_expected_MS_norms [ i ] = np . linalg . norm ( _mask * S , 2 ) N_bernstein = ( gamma * L_infty * S_norm ) / ( 3 * L_max ) + 1 N_empirical = ( gamma * empirical_L_infty * S_norm ) / ( 3 * empirical_L_max ) + 1 N_empirical_alternative = ( gamma * L_infty * S_norm ) / ( 3 * empirical_L_max ) + 1 N_theory_upperbound = ( gamma * S_norm ) / 3 + 1 D_bernstein = (( gamma * S_norm ) ** 2 / ( 2 * L_max ) + 1 ) / np . log ( 2 * n / eta ) D_empirical = (( gamma * S_norm ) ** 2 / ( 2 * empirical_L_max ) + 1 ) / np . log ( 2 * effective_dimension / eta ) D_theory_lowerbound = (( gamma ** 2 * S_norm ) / ( 2 * empirical_L_max ) + 1 ) / np . log ( 2 * n / eta ) if verbose : print ( N_bernstein , D_bernstein ) print ( N_empirical , D_empirical ) print ( N_empirical_alternative , D_empirical ) print ( N_theory_upperbound , D_theory_lowerbound ) p_min = N_bernstein / D_bernstein p_min_empirical = N_empirical / D_empirical p_min_empirical_alternative = N_empirical_alternative / D_empirical p_min_lowerbound = N_theory_upperbound / D_theory_lowerbound if verbose : print ( \"p_min\" , p_min ) print ( \"empirical_p_min\" , p_min_empirical ) print ( \"empirical_p_min_alternative\" , p_min_empirical_alternative ) print ( \"theory_p_min\" , p_min_lowerbound ) return ( p_min_empirical , p_min , p_min_lowerbound , p_min_empirical_alternative , MC_expected_MS_norms , ) Upper Bound Estimation \u00b6 p_upper_only_k \u00b6 p_upper_only_k ( S : np . ndarray , k : int = 1 , method : str = \"dyson\" , mc_trials : int = 600 , mc_quantile : float = 0.9 , tol : float = 0.0001 , verbose : bool = False , seed : int | None = None , omega : float = 0.8 , eta : float = 0.001 , jump_frac : float = 0.1 , ) -> float Source code in pysrf/bounds.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 def p_upper_only_k ( S : np . ndarray , k : int = 1 , method : str = \"dyson\" , mc_trials : int = 600 , mc_quantile : float = 0.9 , tol : float = 1e-4 , verbose : bool = False , seed : int | None = None , omega : float = 0.8 , eta : float = 1e-3 , jump_frac : float = 0.1 , ) -> float : lam = np . sort ( eigvalsh ( S ))[:: - 1 ] n = len ( lam ) if not ( 1 <= k <= n ): raise ValueError ( \"k must be between 1 and n\" ) lam_k = lam [ k - 1 ] lam_k1 = lam [ k ] if k < n else None if lam_k <= 0 : if verbose : print ( \"lambda_k <= 0 -> no positive spike to separate.\" ) return 0.0 if ( lam_k1 is None ) or ( lam_k1 <= 0 ): if verbose : print ( \"lambda_{k+1} <= 0 -> only first k can be out for all large p; return 1.0.\" ) return 1.0 edge = ( ( lambda p : lambda_bulk_dyson_raw ( S , p , omega = omega , eta = eta , jump_frac = jump_frac ) ) if method == \"dyson\" else ( lambda p : monte_carlo_bulk_edge_raw ( S , p , n_trials = mc_trials , quantile = mc_quantile , seed = seed ) ) ) def count_out ( p ): e = edge ( p ) return int ( np . sum ( p * lam > e )), e c_hi , e_hi = count_out ( 0.99 ) if verbose : print ( f \"[sanity] p=0.99: bulk= { e_hi : .4g } , count_out= { c_hi } , lambda1= { lam [ 0 ] : .4g } , lambda2= { lam [ 1 ] if n > 1 else np . nan : .4g } \" ) if c_hi < k : if verbose : print ( f \"Even at p~1, only { c_hi } spikes out (< k). Returning 1.0.\" ) return 1.0 grid = np . linspace ( 0.02 , 0.99 , 80 ) feas = [ p for p in grid if count_out ( p )[ 0 ] == k ] if not feas : def g ( p ): return p * lam_k1 - edge ( p ) a , b = 1e-3 , 0.99 ga , gb = g ( a ), g ( b ) if ga >= 0 and gb >= 0 : if verbose : print ( \"(k+1) spike is out for all p; returning smallest p where count==k (none found) -> 0.\" ) return 0.0 if ga < 0 and gb <= 0 : if verbose : print ( \"(k+1) never emerges up to 0.99; returning 1.0.\" ) return 1.0 lo , hi = a , b for _ in range ( 60 ): mid = 0.5 * ( lo + hi ) if g ( mid ) >= 0 : hi = mid else : lo = mid if ( hi - lo ) < tol : break p_star = max ( 0.0 , min ( 1.0 , lo - 2 * tol )) return p_star p_lo = max ( feas ) def cond_ge_kplus1 ( p ): return count_out ( p )[ 0 ] >= ( k + 1 ) p_hi = min ( 0.99 , p_lo + 0.05 ) while ( p_hi < 0.99 ) and ( not cond_ge_kplus1 ( p_hi )): p_hi = min ( 0.99 , p_hi + 0.05 ) if not cond_ge_kplus1 ( p_hi ): return 1.0 lo , hi = p_lo , p_hi for _ in range ( 60 ): mid = 0.5 * ( lo + hi ) if cond_ge_kplus1 ( mid ): hi = mid else : lo = mid if ( hi - lo ) < tol : break p_star = max ( 0.0 , min ( 1.0 , lo )) if verbose : c_star , e_star = count_out ( p_star ) print ( f \"p*= { p_star : .4f } , bulk= { e_star : .6g } , count_out(p*)= { c_star } \" ) return p_star","title":"Sampling Bounds"},{"location":"api/bounds/#sampling-bounds-api","text":"","title":"Sampling Bounds API"},{"location":"api/bounds/#main-functions","text":"","title":"Main Functions"},{"location":"api/bounds/#pysrf.estimate_sampling_bounds_fast","text":"estimate_sampling_bounds_fast ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 0.001 , jump_frac : float = 0.1 , tol : float = 0.0001 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , n_jobs : int = - 1 , ) -> tuple [ float , float , np . ndarray ] Source code in pysrf/bounds.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 def estimate_sampling_bounds_fast ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 1e-3 , jump_frac : float = 0.1 , tol : float = 1e-4 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , n_jobs : int = - 1 , ) -> tuple [ float , float , np . ndarray ]: pmin , _ , _ , _ , _ = pmin_bound ( S , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose ) eff_dim = np . ceil (( np . linalg . norm ( S , \"fro\" ) / np . linalg . norm ( S , 2 )) ** 2 ) . astype ( int ) pmax = p_upper_only_k ( S , k = eff_dim , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) S_noise = S if pmin > pmax - gap : epsilon = np . linalg . norm ( S , 2 ) / np . sqrt ( S . shape [ 0 ]) t_range = np . linspace ( 0.0 , epsilon , 10 ) A = np . random . rand ( S . shape [ 0 ], S . shape [ 1 ]) AtA = A + A . T def _eval_t ( t ): S_t = S + t * AtA pmin_t , _ , _ , _ , _ = pmin_bound ( S_t , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose , ) eff_dim_t = np . ceil ( ( np . linalg . norm ( S_t , \"fro\" ) / np . linalg . norm ( S_t , 2 )) ** 2 ) . astype ( int ) pmax_t = p_upper_only_k ( S_t , k = eff_dim_t , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) return float ( pmin_t ), float ( pmax_t ) results = Parallel ( n_jobs = n_jobs )( delayed ( _eval_t )( float ( t )) for t in t_range ) idx = None for i , ( pm , px ) in enumerate ( results ): if pm < px - gap : idx = i break if idx is not None : t_threshold = float ( t_range [ idx ]) pmin , pmax = results [ idx ] else : t_threshold = 0.0 pmin , pmax = results [ - 1 ] S_noise = S + t_threshold * AtA return pmin , pmax , S_noise","title":"estimate_sampling_bounds_fast"},{"location":"api/bounds/#pysrf.estimate_sampling_bounds","text":"estimate_sampling_bounds ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 0.001 , jump_frac : float = 0.1 , tol : float = 0.0001 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , ) -> tuple [ float , float , np . ndarray ] Source code in pysrf/bounds.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 def estimate_sampling_bounds ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , method : str = \"dyson\" , omega : float = 0.8 , eta_pmax : float = 1e-3 , jump_frac : float = 0.1 , tol : float = 1e-4 , gap : float = 0.05 , verbose : bool = False , random_state : int = 31213 , ) -> tuple [ float , float , np . ndarray ]: pmin , _ , _ , _ , _ = pmin_bound ( S , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose ) eff_dim = np . ceil (( np . linalg . norm ( S , \"fro\" ) / np . linalg . norm ( S , 2 )) ** 2 ) . astype ( int ) pmax = p_upper_only_k ( S , k = eff_dim , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) S_noise = S if pmin > pmax - gap : if verbose : print ( \"Noise regime triggered\" ) print ( f \"pmin = { pmin } , pmax = { pmax } \" ) epsilon = np . linalg . norm ( S , 2 ) / np . sqrt ( S . shape [ 0 ]) t_range = np . linspace ( 0.0 , epsilon , 10 ) eff_dim_list = [] pmin_list = [] pmax_list = [] A = np . random . rand ( S . shape [ 0 ], S . shape [ 1 ]) t_threshold = 0 t_iter = iter ( t_range ) t = next ( t_iter ) while True : S_noise = S + t * ( A + A . T ) pmin , _ , _ , _ , _ = pmin_bound ( S_noise , gamma = gamma , eta = eta , rho = rho , random_state = random_state , verbose = verbose , ) eff_dim = np . ceil ( ( np . linalg . norm ( S_noise , \"fro\" ) / np . linalg . norm ( S_noise , 2 )) ** 2 ) . astype ( int ) pmax = p_upper_only_k ( S_noise , k = eff_dim , method = method , tol = tol , omega = omega , eta = eta_pmax , jump_frac = jump_frac , verbose = verbose , seed = random_state , ) if verbose : print ( t , pmin , eff_dim , pmax ) eff_dim_list . append ( eff_dim ) pmin_list . append ( pmin ) pmax_list . append ( pmax ) if pmin < pmax - gap : t_threshold = t break try : t = next ( t_iter ) except StopIteration : break S_noise = S + t_threshold * ( A + A . T ) return pmin , pmax , S_noise","title":"estimate_sampling_bounds"},{"location":"api/bounds/#lower-bound-estimation","text":"","title":"Lower Bound Estimation"},{"location":"api/bounds/#pysrf.pmin_bound","text":"pmin_bound ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , n_realizations : int = 500 , random_state : int | None = None , verbose : bool = False , monte_carlo : bool = False , ) -> tuple [ float , float , float , float , np . ndarray ] Source code in pysrf/bounds.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def pmin_bound ( S : np . ndarray , gamma : float = 1.05 , eta : float = 0.05 , rho : float = 0.95 , n_realizations : int = 500 , random_state : int | None = None , verbose : bool = False , monte_carlo : bool = False , ) -> tuple [ float , float , float , float , np . ndarray ]: np . random . seed ( random_state ) n = S . shape [ 0 ] _is_symmetric = np . allclose ( S , S . T ) L_max = np . max (( S ** 2 ) . sum ( axis = 1 ) - np . diag ( S ) ** 2 ) _row_sq = ( S ** 2 ) . sum ( axis = 1 ) - np . diag ( S ) ** 2 empirical_L_max = np . quantile ( _row_sq , rho ) S_norm = np . linalg . norm ( S , 2 ) L_infty = 2 * np . max ( np . abs ( S )) empirical_L_infty = 2 * np . quantile ( np . abs ( S ), rho ) effective_dimension = ( np . linalg . norm ( S , \"fro\" ) / S_norm ) ** 2 if verbose : print ( \"effective dimension : \" , effective_dimension ) MC_expected_MS_norms = np . zeros ( n_realizations ) if monte_carlo : for i in range ( n_realizations ): _p = np . random . rand () _mask = np . random . binomial ( 1 , _p , size = S . shape ) if _is_symmetric : _mask = np . triu ( _mask , 1 ) _mask += _mask . T MC_expected_MS_norms [ i ] = np . linalg . norm ( _mask * S , 2 ) N_bernstein = ( gamma * L_infty * S_norm ) / ( 3 * L_max ) + 1 N_empirical = ( gamma * empirical_L_infty * S_norm ) / ( 3 * empirical_L_max ) + 1 N_empirical_alternative = ( gamma * L_infty * S_norm ) / ( 3 * empirical_L_max ) + 1 N_theory_upperbound = ( gamma * S_norm ) / 3 + 1 D_bernstein = (( gamma * S_norm ) ** 2 / ( 2 * L_max ) + 1 ) / np . log ( 2 * n / eta ) D_empirical = (( gamma * S_norm ) ** 2 / ( 2 * empirical_L_max ) + 1 ) / np . log ( 2 * effective_dimension / eta ) D_theory_lowerbound = (( gamma ** 2 * S_norm ) / ( 2 * empirical_L_max ) + 1 ) / np . log ( 2 * n / eta ) if verbose : print ( N_bernstein , D_bernstein ) print ( N_empirical , D_empirical ) print ( N_empirical_alternative , D_empirical ) print ( N_theory_upperbound , D_theory_lowerbound ) p_min = N_bernstein / D_bernstein p_min_empirical = N_empirical / D_empirical p_min_empirical_alternative = N_empirical_alternative / D_empirical p_min_lowerbound = N_theory_upperbound / D_theory_lowerbound if verbose : print ( \"p_min\" , p_min ) print ( \"empirical_p_min\" , p_min_empirical ) print ( \"empirical_p_min_alternative\" , p_min_empirical_alternative ) print ( \"theory_p_min\" , p_min_lowerbound ) return ( p_min_empirical , p_min , p_min_lowerbound , p_min_empirical_alternative , MC_expected_MS_norms , )","title":"pmin_bound"},{"location":"api/bounds/#upper-bound-estimation","text":"","title":"Upper Bound Estimation"},{"location":"api/bounds/#pysrf.p_upper_only_k","text":"p_upper_only_k ( S : np . ndarray , k : int = 1 , method : str = \"dyson\" , mc_trials : int = 600 , mc_quantile : float = 0.9 , tol : float = 0.0001 , verbose : bool = False , seed : int | None = None , omega : float = 0.8 , eta : float = 0.001 , jump_frac : float = 0.1 , ) -> float Source code in pysrf/bounds.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 def p_upper_only_k ( S : np . ndarray , k : int = 1 , method : str = \"dyson\" , mc_trials : int = 600 , mc_quantile : float = 0.9 , tol : float = 1e-4 , verbose : bool = False , seed : int | None = None , omega : float = 0.8 , eta : float = 1e-3 , jump_frac : float = 0.1 , ) -> float : lam = np . sort ( eigvalsh ( S ))[:: - 1 ] n = len ( lam ) if not ( 1 <= k <= n ): raise ValueError ( \"k must be between 1 and n\" ) lam_k = lam [ k - 1 ] lam_k1 = lam [ k ] if k < n else None if lam_k <= 0 : if verbose : print ( \"lambda_k <= 0 -> no positive spike to separate.\" ) return 0.0 if ( lam_k1 is None ) or ( lam_k1 <= 0 ): if verbose : print ( \"lambda_{k+1} <= 0 -> only first k can be out for all large p; return 1.0.\" ) return 1.0 edge = ( ( lambda p : lambda_bulk_dyson_raw ( S , p , omega = omega , eta = eta , jump_frac = jump_frac ) ) if method == \"dyson\" else ( lambda p : monte_carlo_bulk_edge_raw ( S , p , n_trials = mc_trials , quantile = mc_quantile , seed = seed ) ) ) def count_out ( p ): e = edge ( p ) return int ( np . sum ( p * lam > e )), e c_hi , e_hi = count_out ( 0.99 ) if verbose : print ( f \"[sanity] p=0.99: bulk= { e_hi : .4g } , count_out= { c_hi } , lambda1= { lam [ 0 ] : .4g } , lambda2= { lam [ 1 ] if n > 1 else np . nan : .4g } \" ) if c_hi < k : if verbose : print ( f \"Even at p~1, only { c_hi } spikes out (< k). Returning 1.0.\" ) return 1.0 grid = np . linspace ( 0.02 , 0.99 , 80 ) feas = [ p for p in grid if count_out ( p )[ 0 ] == k ] if not feas : def g ( p ): return p * lam_k1 - edge ( p ) a , b = 1e-3 , 0.99 ga , gb = g ( a ), g ( b ) if ga >= 0 and gb >= 0 : if verbose : print ( \"(k+1) spike is out for all p; returning smallest p where count==k (none found) -> 0.\" ) return 0.0 if ga < 0 and gb <= 0 : if verbose : print ( \"(k+1) never emerges up to 0.99; returning 1.0.\" ) return 1.0 lo , hi = a , b for _ in range ( 60 ): mid = 0.5 * ( lo + hi ) if g ( mid ) >= 0 : hi = mid else : lo = mid if ( hi - lo ) < tol : break p_star = max ( 0.0 , min ( 1.0 , lo - 2 * tol )) return p_star p_lo = max ( feas ) def cond_ge_kplus1 ( p ): return count_out ( p )[ 0 ] >= ( k + 1 ) p_hi = min ( 0.99 , p_lo + 0.05 ) while ( p_hi < 0.99 ) and ( not cond_ge_kplus1 ( p_hi )): p_hi = min ( 0.99 , p_hi + 0.05 ) if not cond_ge_kplus1 ( p_hi ): return 1.0 lo , hi = p_lo , p_hi for _ in range ( 60 ): mid = 0.5 * ( lo + hi ) if cond_ge_kplus1 ( mid ): hi = mid else : lo = mid if ( hi - lo ) < tol : break p_star = max ( 0.0 , min ( 1.0 , lo )) if verbose : c_star , e_star = count_out ( p_star ) print ( f \"p*= { p_star : .4f } , bulk= { e_star : .6g } , count_out(p*)= { c_star } \" ) return p_star","title":"p_upper_only_k"},{"location":"api/cross_validation/","text":"Cross-Validation API \u00b6 Main Function \u00b6 cross_val_score \u00b6 cross_val_score ( similarity_matrix : np . ndarray , estimator : BaseEstimator | None = None , param_grid : dict [ str , list ] | None = None , n_repeats : int = 5 , sampling_fraction : float = 0.8 , estimate_sampling_fraction : bool | dict = False , sampling_selection : str = \"mean\" , random_state : int = 0 , verbose : int = 1 , n_jobs : int = - 1 , missing_values : float | None = np . nan , fit_final_estimator : bool = False , ) -> ADMMGridSearchCV Cross-validate any estimator for matrix completion. Generic cross-validation function that works with SRF or any sklearn-compatible estimator with a .reconstruct() method. Parameters: similarity_matrix ( ndarray ) \u2013 Symmetric similarity matrix to cross-validate estimator ( BaseEstimator or None , default: None ) \u2013 Estimator to cross-validate. If None, uses SRF(random_state=random_state). Can be a single estimator or a Pipeline. Must have a .reconstruct() method. param_grid ( dict or None , default: None ) \u2013 Dictionary with parameter names (str) as keys and lists of values to try as values. If None, uses default {'rank': [5, 10, 15, 20]} for SRF. n_repeats ( int , default: 5 ) \u2013 Number of times to repeat the cross-validation sampling_fraction ( float , default: 0.8 ) \u2013 Fraction of observed entries to use for training in each split; must be in (0, 1). Ignored when estimate_sampling_fraction is True or a dict; if both are provided, estimate_sampling_fraction takes precedence. estimate_sampling_fraction ( bool or dict , default: False ) \u2013 If True, automatically estimate optimal sampling fraction using sampling bound estimation from Random Matrix Theory. If dict, passed as kwargs to estimate_sampling_bounds_fast(). When enabled, overrides sampling_fraction. sampling_selection ( str , default: \"mean\" ) \u2013 Selection method for the estimated sampling fraction; one of {\"mean\", \"min\", \"max\"}. random_state ( int , default: 0 ) \u2013 Random seed for reproducibility verbose ( int , default: 1 ) \u2013 Verbosity level n_jobs ( int , default: -1 ) \u2013 Number of jobs to run in parallel (-1 uses all processors) missing_values ( float or None , default: np.nan ) \u2013 Value to consider as missing fit_final_estimator ( bool , default: False ) \u2013 Whether to fit the final estimator on the best parameters Returns: grid ( ADMMGridSearchCV ) \u2013 Fitted ADMMGridSearchCV object with best parameters and scores Examples: >>> from pysrf.cross_validation import cross_val_score >>> result = cross_val_score ( similarity_matrix , param_grid = { 'rank' : [ 5 , 10 , 15 ]}) Source code in pysrf/cross_validation.pydef cross_val_score ( similarity_matrix : np . ndarray , estimator : BaseEstimator | None = None , param_grid : dict [ str , list ] | None = None , n_repeats : int = 5 , sampling_fraction : float = 0.8 , estimate_sampling_fraction : bool | dict = False , sampling_selection : str = \"mean\" , random_state : int = 0 , verbose : int = 1 , n_jobs : int = - 1 , missing_values : float | None = np . nan , fit_final_estimator : bool = False , ) -> ADMMGridSearchCV : \"\"\" Cross-validate any estimator for matrix completion. Generic cross-validation function that works with SRF or any sklearn-compatible estimator with a .reconstruct() method. Parameters ---------- similarity_matrix : ndarray Symmetric similarity matrix to cross-validate estimator : BaseEstimator or None, default=None Estimator to cross-validate. If None, uses SRF(random_state=random_state). Can be a single estimator or a Pipeline. Must have a .reconstruct() method. param_grid : dict or None, default=None Dictionary with parameter names (str) as keys and lists of values to try as values. If None, uses default {'rank': [5, 10, 15, 20]} for SRF. n_repeats : int, default=5 Number of times to repeat the cross-validation sampling_fraction : float, default=0.8 Fraction of observed entries to use for training in each split; must be in (0, 1). Ignored when estimate_sampling_fraction is True or a dict; if both are provided, estimate_sampling_fraction takes precedence. estimate_sampling_fraction : bool or dict, default=False If True, automatically estimate optimal sampling fraction using sampling bound estimation from Random Matrix Theory. If dict, passed as kwargs to estimate_sampling_bounds_fast(). When enabled, overrides sampling_fraction. sampling_selection : str, default=\"mean\" Selection method for the estimated sampling fraction; one of {\"mean\", \"min\", \"max\"}. random_state : int, default=0 Random seed for reproducibility verbose : int, default=1 Verbosity level n_jobs : int, default=-1 Number of jobs to run in parallel (-1 uses all processors) missing_values : float or None, default=np.nan Value to consider as missing fit_final_estimator : bool, default=False Whether to fit the final estimator on the best parameters Returns ------- grid : ADMMGridSearchCV Fitted ADMMGridSearchCV object with best parameters and scores Examples -------- >>> from pysrf.cross_validation import cross_val_score >>> result = cross_val_score(similarity_matrix, param_grid={'rank': [5, 10, 15]}) \"\"\" if estimator is None : estimator = SRF ( random_state = random_state ) if param_grid is None : param_grid = { \"rank\" : [ 5 , 10 , 15 , 20 ]} valid_selections = { \"mean\" , \"min\" , \"max\" } if sampling_selection not in valid_selections : raise ValueError ( f \"sampling_selection must be one of { sorted ( valid_selections ) } \" ) if estimate_sampling_fraction : from .bounds import estimate_sampling_bounds_fast kwargs = ( estimate_sampling_fraction if isinstance ( estimate_sampling_fraction , dict ) else {} ) if \"random_state\" not in kwargs : kwargs [ \"random_state\" ] = random_state if \"n_jobs\" not in kwargs : kwargs [ \"n_jobs\" ] = n_jobs if \"verbose\" not in kwargs : kwargs [ \"verbose\" ] = bool ( verbose ) pmin , pmax , _ = estimate_sampling_bounds_fast ( similarity_matrix , ** kwargs ) sampling_fraction = { \"mean\" : np . mean ([ pmin , pmax ]), \"min\" : pmin , \"max\" : pmax , }[ sampling_selection ] else : if sampling_fraction is None : raise ValueError ( \"sampling_fraction must be provided when estimate_sampling_fraction is False\" ) try : sampling_fraction = float ( sampling_fraction ) except ( TypeError , ValueError ): raise TypeError ( \"sampling_fraction must be a float in (0, 1)\" ) if not ( 0.0 < sampling_fraction < 1.0 ): raise ValueError ( \"sampling_fraction must be in (0, 1)\" ) cv = EntryMaskSplit ( n_repeats = n_repeats , sampling_fraction = sampling_fraction , random_state = random_state , missing_values = missing_values , ) grid = ADMMGridSearchCV ( estimator = estimator , param_grid = param_grid , cv = cv , n_jobs = n_jobs , verbose = verbose , fit_final_estimator = fit_final_estimator , ) grid . fit ( similarity_matrix ) return grid Cross-Validator \u00b6 EntryMaskSplit \u00b6 EntryMaskSplit ( n_repeats : int = 5 , sampling_fraction : float = 0.8 , random_state : int | None = None , missing_values : float | None = np . nan , ) Bases: BaseCrossValidator Cross-validator for symmetric matrices using entry-wise splits. Generates multiple random train/validation splits by masking entries in a symmetric matrix while preserving symmetry. Parameters: n_repeats ( int , default: 5 ) \u2013 Number of random splits to generate sampling_fraction ( float , default: 0.8 ) \u2013 Fraction of entries kept as observed for training; must be in (0, 1). random_state ( int or None , default: None ) \u2013 Random seed for reproducibility missing_values ( float or None , default: np.nan ) \u2013 Value that marks missing entries Source code in pysrf/cross_validation.py 166 167 168 169 170 171 172 173 174 175 176 177 178 def __init__ ( self , n_repeats : int = 5 , sampling_fraction : float = 0.8 , random_state : int | None = None , missing_values : float | None = np . nan , ): self . n_repeats = n_repeats self . sampling_fraction = sampling_fraction self . random_state = random_state self . missing_values = missing_values if not ( 0.0 < float ( self . sampling_fraction ) < 1.0 ): raise ValueError ( \"sampling_fraction must be in (0, 1)\" ) Grid Search \u00b6 ADMMGridSearchCV \u00b6 ADMMGridSearchCV ( estimator : BaseEstimator , param_grid : dict [ str , list ], cv : EntryMaskSplit , n_jobs : int = - 1 , verbose : int = 0 , fit_final_estimator : bool = False , ) Grid search cross-validation for matrix completion. Performs exhaustive grid search over specified parameter values with entry-wise cross-validation for symmetric matrices. Parameters: estimator ( BaseEstimator ) \u2013 Model instance to optimize param_grid ( dict ) \u2013 Dictionary with parameter names as keys and lists of values to try cv ( EntryMaskSplit ) \u2013 Cross-validation splitter n_jobs ( int , default: -1 ) \u2013 Number of parallel jobs (-1 uses all processors) verbose ( int , default: 0 ) \u2013 Verbosity level fit_final_estimator ( bool , default: False ) \u2013 Whether to fit the model on full data with best parameters Attributes: best_params_ ( dict ) \u2013 Parameters that gave the best score best_score_ ( float ) \u2013 Best validation score achieved cv_results_ ( DataFrame ) \u2013 Detailed results for all parameter combinations best_estimator_ ( estimator ) \u2013 Fitted estimator with best parameters (if fit_final_estimator=True) Source code in pysrf/cross_validation.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 def __init__ ( self , estimator : BaseEstimator , param_grid : dict [ str , list ], cv : EntryMaskSplit , n_jobs : int = - 1 , verbose : int = 0 , fit_final_estimator : bool = False , ): self . estimator = estimator self . param_grid = param_grid self . cv = cv self . n_jobs = n_jobs self . verbose = verbose self . fit_final_estimator = fit_final_estimator Utility Functions \u00b6 mask_missing_entries \u00b6 mask_missing_entries ( x : np . ndarray , sampling_fraction : float , rng : np . random . RandomState , missing_values : float | None = np . nan , ) -> np . ndarray Create a missing mask for symmetric matrix cross-validation. Subsample from valid upper triangular positions to keep as observed, maintaining symmetry. Parameters: x ( ndarray ) \u2013 Input symmetric matrix sampling_fraction ( float ) \u2013 Fraction of entries kept as observed for training; must be in (0, 1). rng ( RandomState ) \u2013 Random number generator missing_values ( float or None , default: nan ) \u2013 Value that marks missing entries Returns: missing_mask ( ndarray of bool ) \u2013 True indicates missing (held out for validation) Source code in pysrf/cross_validation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def mask_missing_entries ( x : np . ndarray , sampling_fraction : float , rng : np . random . RandomState , missing_values : float | None = np . nan , ) -> np . ndarray : \"\"\" Create a missing mask for symmetric matrix cross-validation. Subsample from valid upper triangular positions to keep as observed, maintaining symmetry. Parameters ---------- x : ndarray Input symmetric matrix sampling_fraction : float Fraction of entries kept as observed for training; must be in (0, 1). rng : RandomState Random number generator missing_values : float or None Value that marks missing entries Returns ------- missing_mask : ndarray of bool True indicates missing (held out for validation) \"\"\" observed_mask = ~ np . isnan ( x ) if missing_values is np . nan else x != missing_values triu_i , triu_j = np . triu_indices_from ( x , k = 1 ) triu_observed = observed_mask [ triu_i , triu_j ] valid_positions = np . where ( triu_observed )[ 0 ] n_to_keep = int ( sampling_fraction * len ( valid_positions )) if n_to_keep == 0 : return np . ones_like ( x , dtype = bool ) # Subsample from valid upper triangular positions to keep as observed keep_positions = rng . choice ( valid_positions , size = n_to_keep , replace = False ) # Create missing mask directly - start with all missing missing_mask = np . ones_like ( x , dtype = bool ) # Set kept positions as observed (False = not missing) keep_i = triu_i [ keep_positions ] keep_j = triu_j [ keep_positions ] missing_mask [ keep_i , keep_j ] = False missing_mask [ keep_j , keep_i ] = False # IMPORTANT: Diagonal is never observed to not influence the scaling of the optimization np . fill_diagonal ( missing_mask , True ) return missing_mask fit_and_score \u00b6 fit_and_score ( estimator : BaseEstimator , x : np . ndarray , val_mask : np . ndarray , fit_params : dict , split_idx : int | None = None , ) -> dict Fit estimator with parameters and return validation score. Parameters: estimator ( BaseEstimator ) \u2013 Model instance to fit (works with SRF or any estimator with .reconstruct()) x ( ndarray ) \u2013 Full data matrix val_mask ( ndarray ) \u2013 Boolean mask indicating validation entries fit_params ( dict ) \u2013 Parameters to set on the estimator split_idx ( int or None , default: None ) \u2013 Index of the CV split Returns: result ( dict ) \u2013 Dictionary with score, parameters, and fitted estimator Source code in pysrf/cross_validation.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def fit_and_score ( estimator : BaseEstimator , x : np . ndarray , val_mask : np . ndarray , fit_params : dict , split_idx : int | None = None , ) -> dict : \"\"\" Fit estimator with parameters and return validation score. Parameters ---------- estimator : BaseEstimator Model instance to fit (works with SRF or any estimator with .reconstruct()) x : ndarray Full data matrix val_mask : ndarray Boolean mask indicating validation entries fit_params : dict Parameters to set on the estimator split_idx : int or None Index of the CV split Returns ------- result : dict Dictionary with score, parameters, and fitted estimator \"\"\" est = clone ( estimator ) . set_params ( ** fit_params ) # Set SRF-specific params if estimator supports them if hasattr ( est , \"missing_values\" ): est . set_params ( missing_values = np . nan ) if hasattr ( est , \"bounds\" ): if \"bounds\" not in fit_params or fit_params [ \"bounds\" ] is None : original_bounds = ( np . nanmin ( x ), np . nanmax ( x )) est . set_params ( bounds = original_bounds ) already_nan = np . isnan ( x ) x_copy = np . copy ( x ) x_copy [ val_mask ] = np . nan est . fit ( x_copy ) # Get reconstruction - works with SRF or any estimator with .reconstruct() if hasattr ( est , \"reconstruct\" ): reconstruction = est . reconstruct () else : raise ValueError ( f \"Estimator { type ( est ) . __name__ } must have a .reconstruct() method \" \"for matrix completion cross-validation\" ) valid_mask = val_mask & ~ already_nan mse = np . mean (( x [ valid_mask ] - reconstruction [ valid_mask ]) ** 2 ) result = { \"score\" : mse , \"split\" : split_idx if split_idx is not None else 0 , \"estimator\" : est , \"params\" : fit_params , } # Include history if available (optional) if hasattr ( est , \"history_\" ): result [ \"history\" ] = est . history_ return result","title":"Cross-Validation"},{"location":"api/cross_validation/#cross-validation-api","text":"","title":"Cross-Validation API"},{"location":"api/cross_validation/#main-function","text":"","title":"Main Function"},{"location":"api/cross_validation/#pysrf.cross_val_score","text":"cross_val_score ( similarity_matrix : np . ndarray , estimator : BaseEstimator | None = None , param_grid : dict [ str , list ] | None = None , n_repeats : int = 5 , sampling_fraction : float = 0.8 , estimate_sampling_fraction : bool | dict = False , sampling_selection : str = \"mean\" , random_state : int = 0 , verbose : int = 1 , n_jobs : int = - 1 , missing_values : float | None = np . nan , fit_final_estimator : bool = False , ) -> ADMMGridSearchCV Cross-validate any estimator for matrix completion. Generic cross-validation function that works with SRF or any sklearn-compatible estimator with a .reconstruct() method. Parameters: similarity_matrix ( ndarray ) \u2013 Symmetric similarity matrix to cross-validate estimator ( BaseEstimator or None , default: None ) \u2013 Estimator to cross-validate. If None, uses SRF(random_state=random_state). Can be a single estimator or a Pipeline. Must have a .reconstruct() method. param_grid ( dict or None , default: None ) \u2013 Dictionary with parameter names (str) as keys and lists of values to try as values. If None, uses default {'rank': [5, 10, 15, 20]} for SRF. n_repeats ( int , default: 5 ) \u2013 Number of times to repeat the cross-validation sampling_fraction ( float , default: 0.8 ) \u2013 Fraction of observed entries to use for training in each split; must be in (0, 1). Ignored when estimate_sampling_fraction is True or a dict; if both are provided, estimate_sampling_fraction takes precedence. estimate_sampling_fraction ( bool or dict , default: False ) \u2013 If True, automatically estimate optimal sampling fraction using sampling bound estimation from Random Matrix Theory. If dict, passed as kwargs to estimate_sampling_bounds_fast(). When enabled, overrides sampling_fraction. sampling_selection ( str , default: \"mean\" ) \u2013 Selection method for the estimated sampling fraction; one of {\"mean\", \"min\", \"max\"}. random_state ( int , default: 0 ) \u2013 Random seed for reproducibility verbose ( int , default: 1 ) \u2013 Verbosity level n_jobs ( int , default: -1 ) \u2013 Number of jobs to run in parallel (-1 uses all processors) missing_values ( float or None , default: np.nan ) \u2013 Value to consider as missing fit_final_estimator ( bool , default: False ) \u2013 Whether to fit the final estimator on the best parameters Returns: grid ( ADMMGridSearchCV ) \u2013 Fitted ADMMGridSearchCV object with best parameters and scores Examples: >>> from pysrf.cross_validation import cross_val_score >>> result = cross_val_score ( similarity_matrix , param_grid = { 'rank' : [ 5 , 10 , 15 ]}) Source code in pysrf/cross_validation.pydef cross_val_score ( similarity_matrix : np . ndarray , estimator : BaseEstimator | None = None , param_grid : dict [ str , list ] | None = None , n_repeats : int = 5 , sampling_fraction : float = 0.8 , estimate_sampling_fraction : bool | dict = False , sampling_selection : str = \"mean\" , random_state : int = 0 , verbose : int = 1 , n_jobs : int = - 1 , missing_values : float | None = np . nan , fit_final_estimator : bool = False , ) -> ADMMGridSearchCV : \"\"\" Cross-validate any estimator for matrix completion. Generic cross-validation function that works with SRF or any sklearn-compatible estimator with a .reconstruct() method. Parameters ---------- similarity_matrix : ndarray Symmetric similarity matrix to cross-validate estimator : BaseEstimator or None, default=None Estimator to cross-validate. If None, uses SRF(random_state=random_state). Can be a single estimator or a Pipeline. Must have a .reconstruct() method. param_grid : dict or None, default=None Dictionary with parameter names (str) as keys and lists of values to try as values. If None, uses default {'rank': [5, 10, 15, 20]} for SRF. n_repeats : int, default=5 Number of times to repeat the cross-validation sampling_fraction : float, default=0.8 Fraction of observed entries to use for training in each split; must be in (0, 1). Ignored when estimate_sampling_fraction is True or a dict; if both are provided, estimate_sampling_fraction takes precedence. estimate_sampling_fraction : bool or dict, default=False If True, automatically estimate optimal sampling fraction using sampling bound estimation from Random Matrix Theory. If dict, passed as kwargs to estimate_sampling_bounds_fast(). When enabled, overrides sampling_fraction. sampling_selection : str, default=\"mean\" Selection method for the estimated sampling fraction; one of {\"mean\", \"min\", \"max\"}. random_state : int, default=0 Random seed for reproducibility verbose : int, default=1 Verbosity level n_jobs : int, default=-1 Number of jobs to run in parallel (-1 uses all processors) missing_values : float or None, default=np.nan Value to consider as missing fit_final_estimator : bool, default=False Whether to fit the final estimator on the best parameters Returns ------- grid : ADMMGridSearchCV Fitted ADMMGridSearchCV object with best parameters and scores Examples -------- >>> from pysrf.cross_validation import cross_val_score >>> result = cross_val_score(similarity_matrix, param_grid={'rank': [5, 10, 15]}) \"\"\" if estimator is None : estimator = SRF ( random_state = random_state ) if param_grid is None : param_grid = { \"rank\" : [ 5 , 10 , 15 , 20 ]} valid_selections = { \"mean\" , \"min\" , \"max\" } if sampling_selection not in valid_selections : raise ValueError ( f \"sampling_selection must be one of { sorted ( valid_selections ) } \" ) if estimate_sampling_fraction : from .bounds import estimate_sampling_bounds_fast kwargs = ( estimate_sampling_fraction if isinstance ( estimate_sampling_fraction , dict ) else {} ) if \"random_state\" not in kwargs : kwargs [ \"random_state\" ] = random_state if \"n_jobs\" not in kwargs : kwargs [ \"n_jobs\" ] = n_jobs if \"verbose\" not in kwargs : kwargs [ \"verbose\" ] = bool ( verbose ) pmin , pmax , _ = estimate_sampling_bounds_fast ( similarity_matrix , ** kwargs ) sampling_fraction = { \"mean\" : np . mean ([ pmin , pmax ]), \"min\" : pmin , \"max\" : pmax , }[ sampling_selection ] else : if sampling_fraction is None : raise ValueError ( \"sampling_fraction must be provided when estimate_sampling_fraction is False\" ) try : sampling_fraction = float ( sampling_fraction ) except ( TypeError , ValueError ): raise TypeError ( \"sampling_fraction must be a float in (0, 1)\" ) if not ( 0.0 < sampling_fraction < 1.0 ): raise ValueError ( \"sampling_fraction must be in (0, 1)\" ) cv = EntryMaskSplit ( n_repeats = n_repeats , sampling_fraction = sampling_fraction , random_state = random_state , missing_values = missing_values , ) grid = ADMMGridSearchCV ( estimator = estimator , param_grid = param_grid , cv = cv , n_jobs = n_jobs , verbose = verbose , fit_final_estimator = fit_final_estimator , ) grid . fit ( similarity_matrix ) return grid","title":"cross_val_score"},{"location":"api/cross_validation/#cross-validator","text":"","title":"Cross-Validator"},{"location":"api/cross_validation/#pysrf.EntryMaskSplit","text":"EntryMaskSplit ( n_repeats : int = 5 , sampling_fraction : float = 0.8 , random_state : int | None = None , missing_values : float | None = np . nan , ) Bases: BaseCrossValidator Cross-validator for symmetric matrices using entry-wise splits. Generates multiple random train/validation splits by masking entries in a symmetric matrix while preserving symmetry. Parameters: n_repeats ( int , default: 5 ) \u2013 Number of random splits to generate sampling_fraction ( float , default: 0.8 ) \u2013 Fraction of entries kept as observed for training; must be in (0, 1). random_state ( int or None , default: None ) \u2013 Random seed for reproducibility missing_values ( float or None , default: np.nan ) \u2013 Value that marks missing entries Source code in pysrf/cross_validation.py 166 167 168 169 170 171 172 173 174 175 176 177 178 def __init__ ( self , n_repeats : int = 5 , sampling_fraction : float = 0.8 , random_state : int | None = None , missing_values : float | None = np . nan , ): self . n_repeats = n_repeats self . sampling_fraction = sampling_fraction self . random_state = random_state self . missing_values = missing_values if not ( 0.0 < float ( self . sampling_fraction ) < 1.0 ): raise ValueError ( \"sampling_fraction must be in (0, 1)\" )","title":"EntryMaskSplit"},{"location":"api/cross_validation/#grid-search","text":"","title":"Grid Search"},{"location":"api/cross_validation/#pysrf.ADMMGridSearchCV","text":"ADMMGridSearchCV ( estimator : BaseEstimator , param_grid : dict [ str , list ], cv : EntryMaskSplit , n_jobs : int = - 1 , verbose : int = 0 , fit_final_estimator : bool = False , ) Grid search cross-validation for matrix completion. Performs exhaustive grid search over specified parameter values with entry-wise cross-validation for symmetric matrices. Parameters: estimator ( BaseEstimator ) \u2013 Model instance to optimize param_grid ( dict ) \u2013 Dictionary with parameter names as keys and lists of values to try cv ( EntryMaskSplit ) \u2013 Cross-validation splitter n_jobs ( int , default: -1 ) \u2013 Number of parallel jobs (-1 uses all processors) verbose ( int , default: 0 ) \u2013 Verbosity level fit_final_estimator ( bool , default: False ) \u2013 Whether to fit the model on full data with best parameters Attributes: best_params_ ( dict ) \u2013 Parameters that gave the best score best_score_ ( float ) \u2013 Best validation score achieved cv_results_ ( DataFrame ) \u2013 Detailed results for all parameter combinations best_estimator_ ( estimator ) \u2013 Fitted estimator with best parameters (if fit_final_estimator=True) Source code in pysrf/cross_validation.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 def __init__ ( self , estimator : BaseEstimator , param_grid : dict [ str , list ], cv : EntryMaskSplit , n_jobs : int = - 1 , verbose : int = 0 , fit_final_estimator : bool = False , ): self . estimator = estimator self . param_grid = param_grid self . cv = cv self . n_jobs = n_jobs self . verbose = verbose self . fit_final_estimator = fit_final_estimator","title":"ADMMGridSearchCV"},{"location":"api/cross_validation/#utility-functions","text":"","title":"Utility Functions"},{"location":"api/cross_validation/#pysrf.cross_validation.mask_missing_entries","text":"mask_missing_entries ( x : np . ndarray , sampling_fraction : float , rng : np . random . RandomState , missing_values : float | None = np . nan , ) -> np . ndarray Create a missing mask for symmetric matrix cross-validation. Subsample from valid upper triangular positions to keep as observed, maintaining symmetry. Parameters: x ( ndarray ) \u2013 Input symmetric matrix sampling_fraction ( float ) \u2013 Fraction of entries kept as observed for training; must be in (0, 1). rng ( RandomState ) \u2013 Random number generator missing_values ( float or None , default: nan ) \u2013 Value that marks missing entries Returns: missing_mask ( ndarray of bool ) \u2013 True indicates missing (held out for validation) Source code in pysrf/cross_validation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def mask_missing_entries ( x : np . ndarray , sampling_fraction : float , rng : np . random . RandomState , missing_values : float | None = np . nan , ) -> np . ndarray : \"\"\" Create a missing mask for symmetric matrix cross-validation. Subsample from valid upper triangular positions to keep as observed, maintaining symmetry. Parameters ---------- x : ndarray Input symmetric matrix sampling_fraction : float Fraction of entries kept as observed for training; must be in (0, 1). rng : RandomState Random number generator missing_values : float or None Value that marks missing entries Returns ------- missing_mask : ndarray of bool True indicates missing (held out for validation) \"\"\" observed_mask = ~ np . isnan ( x ) if missing_values is np . nan else x != missing_values triu_i , triu_j = np . triu_indices_from ( x , k = 1 ) triu_observed = observed_mask [ triu_i , triu_j ] valid_positions = np . where ( triu_observed )[ 0 ] n_to_keep = int ( sampling_fraction * len ( valid_positions )) if n_to_keep == 0 : return np . ones_like ( x , dtype = bool ) # Subsample from valid upper triangular positions to keep as observed keep_positions = rng . choice ( valid_positions , size = n_to_keep , replace = False ) # Create missing mask directly - start with all missing missing_mask = np . ones_like ( x , dtype = bool ) # Set kept positions as observed (False = not missing) keep_i = triu_i [ keep_positions ] keep_j = triu_j [ keep_positions ] missing_mask [ keep_i , keep_j ] = False missing_mask [ keep_j , keep_i ] = False # IMPORTANT: Diagonal is never observed to not influence the scaling of the optimization np . fill_diagonal ( missing_mask , True ) return missing_mask","title":"mask_missing_entries"},{"location":"api/cross_validation/#pysrf.cross_validation.fit_and_score","text":"fit_and_score ( estimator : BaseEstimator , x : np . ndarray , val_mask : np . ndarray , fit_params : dict , split_idx : int | None = None , ) -> dict Fit estimator with parameters and return validation score. Parameters: estimator ( BaseEstimator ) \u2013 Model instance to fit (works with SRF or any estimator with .reconstruct()) x ( ndarray ) \u2013 Full data matrix val_mask ( ndarray ) \u2013 Boolean mask indicating validation entries fit_params ( dict ) \u2013 Parameters to set on the estimator split_idx ( int or None , default: None ) \u2013 Index of the CV split Returns: result ( dict ) \u2013 Dictionary with score, parameters, and fitted estimator Source code in pysrf/cross_validation.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 def fit_and_score ( estimator : BaseEstimator , x : np . ndarray , val_mask : np . ndarray , fit_params : dict , split_idx : int | None = None , ) -> dict : \"\"\" Fit estimator with parameters and return validation score. Parameters ---------- estimator : BaseEstimator Model instance to fit (works with SRF or any estimator with .reconstruct()) x : ndarray Full data matrix val_mask : ndarray Boolean mask indicating validation entries fit_params : dict Parameters to set on the estimator split_idx : int or None Index of the CV split Returns ------- result : dict Dictionary with score, parameters, and fitted estimator \"\"\" est = clone ( estimator ) . set_params ( ** fit_params ) # Set SRF-specific params if estimator supports them if hasattr ( est , \"missing_values\" ): est . set_params ( missing_values = np . nan ) if hasattr ( est , \"bounds\" ): if \"bounds\" not in fit_params or fit_params [ \"bounds\" ] is None : original_bounds = ( np . nanmin ( x ), np . nanmax ( x )) est . set_params ( bounds = original_bounds ) already_nan = np . isnan ( x ) x_copy = np . copy ( x ) x_copy [ val_mask ] = np . nan est . fit ( x_copy ) # Get reconstruction - works with SRF or any estimator with .reconstruct() if hasattr ( est , \"reconstruct\" ): reconstruction = est . reconstruct () else : raise ValueError ( f \"Estimator { type ( est ) . __name__ } must have a .reconstruct() method \" \"for matrix completion cross-validation\" ) valid_mask = val_mask & ~ already_nan mse = np . mean (( x [ valid_mask ] - reconstruction [ valid_mask ]) ** 2 ) result = { \"score\" : mse , \"split\" : split_idx if split_idx is not None else 0 , \"estimator\" : est , \"params\" : fit_params , } # Include history if available (optional) if hasattr ( est , \"history_\" ): result [ \"history\" ] = est . history_ return result","title":"fit_and_score"},{"location":"api/model/","text":"Model API \u00b6 SRF Class \u00b6 SRF \u00b6 SRF ( rank : int = 10 , rho : float = 3.0 , max_outer : int = 10 , max_inner : int = 30 , tol : float = 0.0001 , verbose : bool = False , init : str = \"random_sqrt\" , random_state : int | None = None , missing_values : float | None = np . nan , bounds : tuple [ float , float ] | None = ( None , None ), ) Bases: TransformerMixin , BaseEstimator Symmetric Non-negative Matrix Factorization using ADMM. This class implements symmetric non-negative matrix factorization (SymNMF) using the Alternating Direction Method of Multipliers (ADMM). It can handle missing entries and optional bound constraints on the factorization. The algorithm solves: min_{w>=0,v} ||M o (S - v)||^2_F + rho/2 ||v - ww^T||^2_F subject to optional bounds on v, where M is an observation mask. Parameters: rank ( int , default: 10 ) \u2013 Number of factors (dimensionality of the latent space) rho ( float , default: 3.0 ) \u2013 ADMM penalty parameter controlling constraint enforcement max_outer ( int , default: 10 ) \u2013 Maximum number of ADMM outer iterations max_inner ( int , default: 30 ) \u2013 Maximum iterations for w-subproblem per outer iteration tol ( float , default: 1e-4 ) \u2013 Convergence tolerance for constraint violation verbose ( bool , default: False ) \u2013 Whether to print optimization progress init ( str , default: 'random_sqrt' ) \u2013 Method for factor initialization ('random', 'random_sqrt', 'nndsvd', 'nndsvdar', 'eigenspectrum') random_state ( int or None , default: None ) \u2013 Random seed for reproducible initialization missing_values ( float or None , default: np.nan ) \u2013 Values to be treated as missing to mask the matrix bounds ( tuple of (float, float) or None , default: (None, None) ) \u2013 Tuple of (lower, upper) bounds for the auxiliary variable v. If None, the bounds are inferred from the data. In practice, one can also pass the expected bounds of the matrix (e.g. (0, 1) for cosine similarity) Attributes: w_ ( ndarray of shape (n_samples, rank) ) \u2013 Learned factor matrix w components_ ( ndarray of shape (n_samples, rank) ) \u2013 Alias for w_ (sklearn compatibility) n_iter_ ( int ) \u2013 Number of ADMM iterations performed history_ ( dict ) \u2013 Dictionary containing optimization metrics per iteration Examples: >>> # Basic usage with complete data >>> from pysrf import SRF >>> model = SRF ( rank = 10 , random_state = 42 ) >>> w = model . fit_transform ( similarity_matrix ) >>> reconstruction = w @ w . T >>> # Usage with missing data (NaN values) >>> similarity_matrix [ mask ] = np . nan >>> model = SRF ( rank = 10 , missing_values = np . nan ) >>> w = model . fit_transform ( similarity_matrix ) References .. [1] Shi et al. (2016). \"Inexact Block Coordinate Descent Methods For Symmetric Nonnegative Matrix Factorization\" Source code in pysrf/model.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 def __init__ ( self , rank : int = 10 , rho : float = 3.0 , max_outer : int = 10 , max_inner : int = 30 , tol : float = 1e-4 , verbose : bool = False , init : str = \"random_sqrt\" , random_state : int | None = None , missing_values : float | None = np . nan , bounds : tuple [ float , float ] | None = ( None , None ), ) -> None : self . rank = rank self . rho = rho self . max_outer = max_outer self . max_inner = max_inner self . tol = tol self . verbose = verbose self . init = init self . random_state = random_state self . missing_values = missing_values self . bounds = bounds fit \u00b6 fit ( x : ndarray , y : ndarray | None = None ) -> SRF Fit the symmetric NMF model to the data. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y ( Ignored , default: None ) \u2013 Not used, present here for API consistency by convention. Returns: self ( object ) \u2013 Fitted estimator. Source code in pysrf/model.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 def fit ( self , x : ndarray , y : ndarray | None = None ) -> SRF : \"\"\" Fit the symmetric NMF model to the data. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y : Ignored Not used, present here for API consistency by convention. Returns ------- self : object Fitted estimator. \"\"\" self . _validate_input_arguments () x = x . copy () x = validate_data ( self , x , reset = True , ensure_all_finite = \"allow-nan\" if self . missing_values is np . nan else True , ensure_2d = True , dtype = np . float64 , ) self . _missing_mask = get_missing_mask ( x , self . missing_values ) if np . all ( self . _missing_mask ): raise ValueError ( \"No observed entries found in the data. All values are missing.\" ) check_symmetric ( self . _missing_mask , raise_exception = True ) self . _observation_mask = ~ self . _missing_mask x [ self . _missing_mask ] = 0.0 x = check_symmetric ( x , raise_exception = True ) if np . all ( self . _observation_mask ): return self . _fit_complete_data ( x ) else : return self . _fit_missing_data ( x ) fit_transform \u00b6 fit_transform ( x : ndarray , y : ndarray | None = None ) -> ndarray Fit the model and return the learned factors. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric similarity matrix y ( Ignored , default: None ) \u2013 Not used, present here for API consistency by convention. Returns: w ( array-like of shape (n_samples, rank) ) \u2013 Learned factor matrix Source code in pysrf/model.py 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 def fit_transform ( self , x : ndarray , y : ndarray | None = None ) -> ndarray : \"\"\" Fit the model and return the learned factors. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric similarity matrix y : Ignored Not used, present here for API consistency by convention. Returns ------- w : array-like of shape (n_samples, rank) Learned factor matrix \"\"\" return self . fit ( x , y ) . transform ( x ) reconstruct \u00b6 reconstruct ( w : ndarray | None = None ) -> ndarray Reconstruct the similarity matrix from factors. Parameters: w ( array-like of shape (n_samples, rank) or None , default: None ) \u2013 Factor matrix to use for reconstruction. If None, uses the fitted factors. Returns: s_hat ( array-like of shape (n_samples, n_samples) ) \u2013 Reconstructed similarity matrix Source code in pysrf/model.py 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 def reconstruct ( self , w : ndarray | None = None ) -> ndarray : \"\"\" Reconstruct the similarity matrix from factors. Parameters ---------- w : array-like of shape (n_samples, rank) or None Factor matrix to use for reconstruction. If None, uses the fitted factors. Returns ------- s_hat : array-like of shape (n_samples, n_samples) Reconstructed similarity matrix \"\"\" if w is None : check_is_fitted ( self ) w = self . w_ return w @ w . T score \u00b6 score ( x : ndarray , y : ndarray | None = None ) -> float Score the model using reconstruction error on observed entries only. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y ( Ignored , default: None ) \u2013 Not used, present here for API consistency by convention. Returns: mse ( float ) \u2013 Mean squared error of the reconstruction on observed entries. Source code in pysrf/model.py 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 def score ( self , x : ndarray , y : ndarray | None = None ) -> float : \"\"\" Score the model using reconstruction error on observed entries only. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y : Ignored Not used, present here for API consistency by convention. Returns ------- mse : float Mean squared error of the reconstruction on observed entries. \"\"\" check_is_fitted ( self ) x = validate_data ( self , x , reset = False , ensure_2d = True , dtype = np . float64 , ensure_all_finite = \"allow-nan\" if self . missing_values is np . nan else True , ) observation_mask = ~ get_missing_mask ( x , self . missing_values ) reconstruction = self . reconstruct () mse = np . mean (( x [ observation_mask ] - reconstruction [ observation_mask ]) ** 2 ) return mse transform \u00b6 transform ( x : ndarray ) -> ndarray Project data onto the learned factor space. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric matrix to transform Returns: w ( array-like of shape (n_samples, rank) ) \u2013 Transformed data Source code in pysrf/model.py 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 def transform ( self , x : ndarray ) -> ndarray : \"\"\" Project data onto the learned factor space. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric matrix to transform Returns ------- w : array-like of shape (n_samples, rank) Transformed data \"\"\" check_is_fitted ( self ) return self . w_","title":"Model (SRF)"},{"location":"api/model/#model-api","text":"","title":"Model API"},{"location":"api/model/#srf-class","text":"","title":"SRF Class"},{"location":"api/model/#pysrf.SRF","text":"SRF ( rank : int = 10 , rho : float = 3.0 , max_outer : int = 10 , max_inner : int = 30 , tol : float = 0.0001 , verbose : bool = False , init : str = \"random_sqrt\" , random_state : int | None = None , missing_values : float | None = np . nan , bounds : tuple [ float , float ] | None = ( None , None ), ) Bases: TransformerMixin , BaseEstimator Symmetric Non-negative Matrix Factorization using ADMM. This class implements symmetric non-negative matrix factorization (SymNMF) using the Alternating Direction Method of Multipliers (ADMM). It can handle missing entries and optional bound constraints on the factorization. The algorithm solves: min_{w>=0,v} ||M o (S - v)||^2_F + rho/2 ||v - ww^T||^2_F subject to optional bounds on v, where M is an observation mask. Parameters: rank ( int , default: 10 ) \u2013 Number of factors (dimensionality of the latent space) rho ( float , default: 3.0 ) \u2013 ADMM penalty parameter controlling constraint enforcement max_outer ( int , default: 10 ) \u2013 Maximum number of ADMM outer iterations max_inner ( int , default: 30 ) \u2013 Maximum iterations for w-subproblem per outer iteration tol ( float , default: 1e-4 ) \u2013 Convergence tolerance for constraint violation verbose ( bool , default: False ) \u2013 Whether to print optimization progress init ( str , default: 'random_sqrt' ) \u2013 Method for factor initialization ('random', 'random_sqrt', 'nndsvd', 'nndsvdar', 'eigenspectrum') random_state ( int or None , default: None ) \u2013 Random seed for reproducible initialization missing_values ( float or None , default: np.nan ) \u2013 Values to be treated as missing to mask the matrix bounds ( tuple of (float, float) or None , default: (None, None) ) \u2013 Tuple of (lower, upper) bounds for the auxiliary variable v. If None, the bounds are inferred from the data. In practice, one can also pass the expected bounds of the matrix (e.g. (0, 1) for cosine similarity) Attributes: w_ ( ndarray of shape (n_samples, rank) ) \u2013 Learned factor matrix w components_ ( ndarray of shape (n_samples, rank) ) \u2013 Alias for w_ (sklearn compatibility) n_iter_ ( int ) \u2013 Number of ADMM iterations performed history_ ( dict ) \u2013 Dictionary containing optimization metrics per iteration Examples: >>> # Basic usage with complete data >>> from pysrf import SRF >>> model = SRF ( rank = 10 , random_state = 42 ) >>> w = model . fit_transform ( similarity_matrix ) >>> reconstruction = w @ w . T >>> # Usage with missing data (NaN values) >>> similarity_matrix [ mask ] = np . nan >>> model = SRF ( rank = 10 , missing_values = np . nan ) >>> w = model . fit_transform ( similarity_matrix ) References .. [1] Shi et al. (2016). \"Inexact Block Coordinate Descent Methods For Symmetric Nonnegative Matrix Factorization\" Source code in pysrf/model.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 def __init__ ( self , rank : int = 10 , rho : float = 3.0 , max_outer : int = 10 , max_inner : int = 30 , tol : float = 1e-4 , verbose : bool = False , init : str = \"random_sqrt\" , random_state : int | None = None , missing_values : float | None = np . nan , bounds : tuple [ float , float ] | None = ( None , None ), ) -> None : self . rank = rank self . rho = rho self . max_outer = max_outer self . max_inner = max_inner self . tol = tol self . verbose = verbose self . init = init self . random_state = random_state self . missing_values = missing_values self . bounds = bounds","title":"SRF"},{"location":"api/model/#pysrf.SRF.fit","text":"fit ( x : ndarray , y : ndarray | None = None ) -> SRF Fit the symmetric NMF model to the data. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y ( Ignored , default: None ) \u2013 Not used, present here for API consistency by convention. Returns: self ( object ) \u2013 Fitted estimator. Source code in pysrf/model.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 def fit ( self , x : ndarray , y : ndarray | None = None ) -> SRF : \"\"\" Fit the symmetric NMF model to the data. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y : Ignored Not used, present here for API consistency by convention. Returns ------- self : object Fitted estimator. \"\"\" self . _validate_input_arguments () x = x . copy () x = validate_data ( self , x , reset = True , ensure_all_finite = \"allow-nan\" if self . missing_values is np . nan else True , ensure_2d = True , dtype = np . float64 , ) self . _missing_mask = get_missing_mask ( x , self . missing_values ) if np . all ( self . _missing_mask ): raise ValueError ( \"No observed entries found in the data. All values are missing.\" ) check_symmetric ( self . _missing_mask , raise_exception = True ) self . _observation_mask = ~ self . _missing_mask x [ self . _missing_mask ] = 0.0 x = check_symmetric ( x , raise_exception = True ) if np . all ( self . _observation_mask ): return self . _fit_complete_data ( x ) else : return self . _fit_missing_data ( x )","title":"fit"},{"location":"api/model/#pysrf.SRF.fit_transform","text":"fit_transform ( x : ndarray , y : ndarray | None = None ) -> ndarray Fit the model and return the learned factors. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric similarity matrix y ( Ignored , default: None ) \u2013 Not used, present here for API consistency by convention. Returns: w ( array-like of shape (n_samples, rank) ) \u2013 Learned factor matrix Source code in pysrf/model.py 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 def fit_transform ( self , x : ndarray , y : ndarray | None = None ) -> ndarray : \"\"\" Fit the model and return the learned factors. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric similarity matrix y : Ignored Not used, present here for API consistency by convention. Returns ------- w : array-like of shape (n_samples, rank) Learned factor matrix \"\"\" return self . fit ( x , y ) . transform ( x )","title":"fit_transform"},{"location":"api/model/#pysrf.SRF.reconstruct","text":"reconstruct ( w : ndarray | None = None ) -> ndarray Reconstruct the similarity matrix from factors. Parameters: w ( array-like of shape (n_samples, rank) or None , default: None ) \u2013 Factor matrix to use for reconstruction. If None, uses the fitted factors. Returns: s_hat ( array-like of shape (n_samples, n_samples) ) \u2013 Reconstructed similarity matrix Source code in pysrf/model.py 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 def reconstruct ( self , w : ndarray | None = None ) -> ndarray : \"\"\" Reconstruct the similarity matrix from factors. Parameters ---------- w : array-like of shape (n_samples, rank) or None Factor matrix to use for reconstruction. If None, uses the fitted factors. Returns ------- s_hat : array-like of shape (n_samples, n_samples) Reconstructed similarity matrix \"\"\" if w is None : check_is_fitted ( self ) w = self . w_ return w @ w . T","title":"reconstruct"},{"location":"api/model/#pysrf.SRF.score","text":"score ( x : ndarray , y : ndarray | None = None ) -> float Score the model using reconstruction error on observed entries only. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y ( Ignored , default: None ) \u2013 Not used, present here for API consistency by convention. Returns: mse ( float ) \u2013 Mean squared error of the reconstruction on observed entries. Source code in pysrf/model.py 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 def score ( self , x : ndarray , y : ndarray | None = None ) -> float : \"\"\" Score the model using reconstruction error on observed entries only. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric similarity matrix. Missing values are allowed and should be marked according to the missing_values parameter. y : Ignored Not used, present here for API consistency by convention. Returns ------- mse : float Mean squared error of the reconstruction on observed entries. \"\"\" check_is_fitted ( self ) x = validate_data ( self , x , reset = False , ensure_2d = True , dtype = np . float64 , ensure_all_finite = \"allow-nan\" if self . missing_values is np . nan else True , ) observation_mask = ~ get_missing_mask ( x , self . missing_values ) reconstruction = self . reconstruct () mse = np . mean (( x [ observation_mask ] - reconstruction [ observation_mask ]) ** 2 ) return mse","title":"score"},{"location":"api/model/#pysrf.SRF.transform","text":"transform ( x : ndarray ) -> ndarray Project data onto the learned factor space. Parameters: x ( array-like of shape (n_samples, n_samples) ) \u2013 Symmetric matrix to transform Returns: w ( array-like of shape (n_samples, rank) ) \u2013 Transformed data Source code in pysrf/model.py 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 def transform ( self , x : ndarray ) -> ndarray : \"\"\" Project data onto the learned factor space. Parameters ---------- x : array-like of shape (n_samples, n_samples) Symmetric matrix to transform Returns ------- w : array-like of shape (n_samples, rank) Transformed data \"\"\" check_is_fitted ( self ) return self . w_","title":"transform"}]}